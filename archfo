#!/bin/bash

# Arch Linux Install
# --------------------------------
# author    : stenioas
#             https://github.com/stenioas
# project   : https://github.com/stenioas/myarch
# license   : LGPL-3.0 (http://opensource.org/licenses/lgpl-3.0.html)
#
# referance : https://github.com/MatMoul/archfi
# reference : https://github.com/helmuthdu/aui

# ======================================================================#
# >>>           VARIÁVEIS
# ----------------------------------------------------------------------#

# --- COLORS
  Bold=$(tput bold)
  Underline=$(tput sgr 0 1)
  Reset=$(tput sgr0)
  # Regular Colors
  Red=$(tput setaf 1)
  Green=$(tput setaf 2)
  Yellow=$(tput setaf 3)
  Blue=$(tput setaf 4)
  Purple=$(tput setaf 5)
  Cyan=$(tput setaf 6)
  White=$(tput setaf 7)
  # Bold
  BRed=${Bold}${Red}
  BGreen=${Bold}${Green}
  BYellow=${Bold}${Yellow}
  BBlue=${Bold}${Blue}
  BPurple=${Bold}${Purple}
  BCyan=${Bold}${Cyan}
  BWhite=${Bold}${White}

# ---     ESSENTIALS
  FILESYSTEM="btrfs"
  KERNEL_VER="linux-lts"
  NEW_LANGUAGE="pt_BR"
  NEW_ZONE="America"
  NEW_SUBZONE="Fortaleza"
  NEW_USER="user"
  NEW_HOSTNAME="archlinux"
  TRIM=0

# ---     MOUNTPOINTS
  EFI_PARTITION="/dev/sda1"
  EFI_MOUNTPOINT="/boot/efi"
  SWAP_PARTITION="/dev/sda2"
  ROOT_PARTITION="/dev/sda3"
  ROOT_MOUNTPOINT="/mnt"
  BOOT_MOUNTPOINT="/boot"
  INSTALL_DISK="/dev/sda"

# ---     PROMPT
  prompt1="Opção: "

# ---     OTHERS
  apptitle="Arch Linux Install"
  baseurl=https://raw.githubusercontent.com/stenioas/myarch/master
  cpl=0
  skipfont="0"
  fspkgs=""


# --------------------------------------------------------
mainmenu(){
	if [ "${1}" = "" ]; then
		nextitem="."
	else
		nextitem=${1}
	fi
	options=()
  options+=("${txtsetloadkeys}" "(loadkeys ...)")
	options+=("${txttimesync}" "(timedatectl ...)")
	options+=("${txtdiskpartmenu}" "")
	options+=("${txtselectpartsmenu}" "")
	options+=("${txtrankmirrors}" "")
	options+=("${txtinstallbase}" "")
	options+=("${txtinstallessentialpkgs}" "")
	options+=("${txtinstallnetwork}" "")
	options+=("${txtgeneratefstab}" "")
	options+=("${txtsethostname}" "")
	options+=("${txtsetlocale}" "")
	options+=("${txtsettimezone}" "")
	options+=("${txtsetkeymap}" "(KEYMAP= ...)")
	options+=("${txtgeneratemkinitcpio}" "(mkinitcpio ...)")
	options+=("${txtinstallgrub}" "")
	options+=("${txtsetrootpassword}" "(passwd ...)")
	options+=("" "")
	options+=("${txtreset}" "(Reset ...)")
	options+=("${txtreboot}" "")
	sel=$(whiptail --backtitle "${apptitle}" --title "${txtmainmenu}" --menu "" --cancel-button "${txtexit}" --default-item "${nextitem}" 0 0 0 \
		"${options[@]}" \
		3>&1 1>&2 2>&3)
	if [ "$?" = "0" ]; then
		case ${sel} in
			"${txtsetloadkeys}")
				setloadkeys
				nextitem="${txttimesync}"
			;;
			"${txttimesync}")
				settimesync
				nextitem="${txtdiskpartmenu}"
			;;
			"${txtdiskpartmenu}")
				diskpartmenu
				nextitem="${txtselectpartsmenu}"
			;;
			"${txtselectpartsmenu}")
				selectparts
				nextitem="${txtrankmirrors}"
			;;
			"${txtrankmirrors}")
				rankmirrors
				nextitem="${txtinstallbase}"
			;;
			"${txtinstallbase}")
				installbase
				nextitem="${txtinstallessentialpkgs}"
			;;
			"${txtinstallessentialpkgs}")
				installessentialpkgs
				nextitem="${txtinstallnetwork}"
			;;
			"${txtinstallnetwork}")
				installnetwork
				nextitem="${txtgeneratefstab}"
			;;
			"${txtgeneratefstab}")
				generatefstab
				nextitem="${txtsethostname}"
			;;
			"${txtsethostname}")
				sethostname
				nextitem="${txtsetlocale}"
			;;
			"${txtsetlocale}")
				setlocale
				nextitem="${txtsettimezone}"
			;;
			"${txtsettimezone}")
				settimezone
				nextitem="${txtsetkeymap}"
			;;
			"${txtsetkeymap}")
				setkeymap
				nextitem="${txtgeneratemkinitcpio}"
			;;
			"${txtgeneratemkinitcpio}")
				generatemkinitcpio
				nextitem="${txtinstallgrub}"
			;;
			"${txtinstallgrub}")
				installgrub
				nextitem="${txtsetrootpassword}"
			;;
			"${txtsetrootpassword}")
				setrootpassword
				nextitem="${txtreboot}"
			;;
			"${txthelp}")
				help
				nextitem="${txtreboot}"
			;;
			"${txtchangelog}")
				showchangelog
				nextitem="${txtreset}"
			;;
			"${txtreset}")
				reset
				nextitem="${txtreboot}"
			;;
			"${txtreboot}")
				rebootpc
				nextitem="${txtreboot}"
			;;
		esac
		mainmenu "${nextitem}"
	else
		clear
	fi
}

setloadkeys() {
	items=$(find /usr/share/kbd/keymaps/ -type f -printf "%f\n" | sort -V)
	options=()
	defsel=""
	for item in ${items}; do
		if [ "${item%%.*}" == "${keymap}" ]; then
			defsel="${item%%.*}"
		fi
		options+=("${item%%.*}" "")
	done
	keymap=$(whiptail --backtitle "${apptitle}" --title "${txtsetloadkeys}" --menu "" --default-item "${defsel}" 0 0 0 \
		"${options[@]}" \
		3>&1 1>&2 2>&3)
	if [ "$?" = "0" ]; then
		print_title "${txtsetloadkeys}..."
		echo "loadkeys ${keymap}"
		loadkeys ${keymap}
    print_warning "${txtfinished}"
		pressanykey
	fi
}

settimesync() {
  print_title "${txttimesync}..."
	echo "timedatectl set-ntp true"
  timedatectl set-ntp true
  print_warning "${txtfinished}"
  pressanykey
}

selectdisk() {
	items=$(lsblk -d -p -n -l -o NAME,SIZE -e 7,11)
	options=()
	IFS_ORIG=$IFS
	IFS=$'\n'
	for item in ${items}
	do  
			options+=("${item}" "")
	done
	IFS=$IFS_ORIG
	result=$(whiptail --backtitle "${apptitle}" --title "${1}" --menu "" 0 0 0 \
  "${options[@]}" 3>&1 1>&2 2>&3)
	if [ "$?" != "0" ]; then
			return 1
	fi
	echo ${result%%\ *}
	return 0    
}

diskpartmenu() {
	device=$( selectdisk "${txteditparts} (cfdisk)" )
	if [ "$?" = "0" ]; then
		clear
		cfdisk ${device}
	fi
}

selectparts() {
	items=$(lsblk -p -n -l -o NAME -e 7,11)
	options=()
	for item in ${items}; do
		options+=("${item}" "")
	done

	bootdev=$(whiptail --backtitle "${apptitle}" --title "${txtselectpartsmenu}" --menu "${txtselectdevice//%1/boot}" --default-item "${bootdev}" 0 0 0 \
		"none" "-" \
		"${options[@]}" \
		3>&1 1>&2 2>&3)
	if [ ! "$?" = "0" ]; then
		return 1
	else
		if [ "${bootdev}" = "none" ]; then
			bootdev=
		fi
	fi

	swapdev=$(whiptail --backtitle "${apptitle}" --title "${txtselectpartsmenu}" --menu "${txtselectdevice//%1/swap}" --default-item "${swapdev}" 0 0 0 \
		"none" "-" \
		"${options[@]}" \
		3>&1 1>&2 2>&3)
	if [ ! "$?" = "0" ]; then
		return 1
	else
		if [ "${swapdev}" = "none" ]; then
			swapdev=
		fi
	fi

	rootdev=$(whiptail --backtitle "${apptitle}" --title "${txtselectpartsmenu}" --menu "${txtselectdevice//%1/root}" --default-item "${rootdev}" 0 0 0 \
		"${options[@]}" \
		3>&1 1>&2 2>&3)
	if [ ! "$?" = "0" ]; then
		return 1
	fi
	realrootdev=${rootdev}

	homedev=$(whiptail --backtitle "${apptitle}" --title "${txtselectpartsmenu}" --menu "${txtselectdevice//%1/home}" 0 0 0 \
		"none" "-" \
		"${options[@]}" \
		3>&1 1>&2 2>&3)
	if [ ! "$?" = "0" ]; then
		return 1
	else
		if [ "${homedev}" = "none" ]; then
			homedev=
		fi
	fi

	msg="${txtselecteddevices}\n\n"
	msg=${msg}"boot : "${bootdev}"\n"
	msg=${msg}"swap : "${swapdev}"\n"
	msg=${msg}"root : "${rootdev}"\n"
	msg=${msg}"home : "${homedev}"\n\n"
	if (whiptail --backtitle "${apptitle}" --title "${txtselectpartsmenu}" --yesno "${msg}" 0 0) then
		isnvme=0
		if [ "${bootdev::8}" == "/dev/nvm" ]; then
			isnvme=1
		fi
		if [ "${rootdev::8}" == "/dev/nvm" ]; then
			isnvme=1
		fi
		mountmenu
	fi
}

mountmenu() {
	if [ "${1}" = "" ]; then
		nextitem="."
	else
		nextitem=${1}
	fi
	options=()
	options+=("${txtformatdevices}" "")
	options+=("${txtmount}" "${txtmountdesc}")
	sel=$(whiptail --backtitle "${apptitle}" --title "${txtformatmountmenu}" --menu "" --cancel-button "${txtback}" --default-item "${nextitem}" 0 0 0 \
		"${options[@]}" \
		3>&1 1>&2 2>&3)
	if [ "$?" = "0" ]; then
		case ${sel} in
			"${txtformatdevices}")
				formatdevices
				nextitem="${txtmount}"
			;;
			"${txtmount}")
				mountparts
				nextitem="${txtmount}"
			;;
		esac
		mountmenu "${nextitem}"
	fi
}


formatdevices(){
	if (whiptail --backtitle "${apptitle}" --title "${txtformatdevices}" --yesno "${txtformatdeviceconfirm}" --defaultno 0 0) then
		fspkgs=""
		if [ ! "${bootdev}" = "" ]; then
			formatbootdevice boot ${bootdev}
		fi
		if [ ! "${swapdev}" = "" ]; then
			formatswapdevice swap ${swapdev}
		fi
		formatdevice root ${rootdev}
		if [ ! "${homedev}" = "" ]; then
			formatdevice home ${homedev}
		fi
	fi
}
formatbootdevice(){
	options=()
	if [ "${efimode}" == "1" ]||[ "${efimode}" = "2" ]; then
		options+=("fat32" "(EFI)")
	fi
	options+=("ext2" "")
	options+=("ext3" "")
	options+=("ext4" "")
	if [ ! "${efimode}" = "1" ]&&[ ! "${efimode}" = "2" ]; then
		options+=("fat32" "(EFI)")
	fi
	sel=$(whiptail --backtitle "${apptitle}" --title "${txtformatdevice}" --menu "${txtselectpartformat//%1/${1} (${2})}" 0 0 0 \
		"${options[@]}" \
		3>&1 1>&2 2>&3)
	if [ ! "$?" = "0" ]; then
		return 1
	fi
	case ${sel} in
		ext2)
	    print_title "FORMATANDO PARTIÇÃO DE BOOT"
			mkfs.ext2 ${2}
		;;
		ext3)
	    print_title "FORMATANDO PARTIÇÃO DE BOOT"
			mkfs.ext3 ${2}
		;;
		ext4)
	    print_title "FORMATANDO PARTIÇÃO DE BOOT"
			mkfs.ext4 ${2}
		;;
		fat32)
	    print_title "FORMATANDO PARTIÇÃO DE BOOT"
			fspkgs="${fspkgs[@]} dosfstools"
			mkfs.fat ${2}
		;;
	esac
	print_warning "${txtfinished}"
	pressanykey
}
formatswapdevice() {
	options=()
	options+=("swap" "")
	sel=$(whiptail --backtitle "${apptitle}" --title "${txtformatdevice}" --menu "${txtselectpartformat//%1/${1} (${2})}" 0 0 0 \
		"${options[@]}" \
		3>&1 1>&2 2>&3)
	if [ ! "$?" = "0" ]; then
		return 1
	fi
	case ${sel} in
		swap)
	    print_title "${txtformatdevice} SWAP..."
			mkswap ${swapdev}
			echo ""
			pressanykey
		;;
	esac
	clear
}
formatdevice(){
	options=()
	options+=("btrfs" "")
	options+=("ext4" "")
	options+=("ext3" "")
	options+=("ext2" "")
	options+=("xfs" "")
	options+=("f2fs" "")
	options+=("jfs" "")
	options+=("reiserfs" "")
	if [ ! "${3}" = "noluks" ]; then
		options+=("luks" "encrypted")
	fi
	sel=$(whiptail --backtitle "${apptitle}" --title "${txtformatdevice}" --menu "${txtselectpartformat//%1/${1} (${2})}" 0 0 0 \
		"${options[@]}" \
		3>&1 1>&2 2>&3)
	if [ ! "$?" = "0" ]; then
		return 1
	fi
	print_title "${txtformatdevice} RAIZ..."
	case ${sel} in
		btrfs)
			fspkgs="${fspkgs[@]} btrfs-progs"
			echo "mkfs.btrfs -f ${2}"
			mkfs.btrfs -f ${2}
			if [ "${1}" = "root" ]; then
				echo "mount ${2} /mnt"
				echo "btrfs subvolume create /mnt/root"
				echo "btrfs subvolume set-default /mnt/root"
				echo "umount /mnt"
				mount ${2} /mnt
				btrfs subvolume create /mnt/root
				btrfs subvolume set-default /mnt/root
				umount /mnt
			fi
		;;
		ext4)
			echo "mkfs.ext4 ${2}"
			mkfs.ext4 ${2}
		;;
		ext3)
			echo "mkfs.ext3 ${2}"
			mkfs.ext3 ${2}
		;;
		ext2)
			echo "mkfs.ext2 ${2}"
			mkfs.ext2 ${2}
		;;
		xfs)
			fspkgs="${fspkgs[@]} xfsprogs"
			echo "mkfs.xfs -f ${2}"
			mkfs.xfs -f ${2}
		;;
		f2fs)
			fspkgs="${fspkgs[@]} f2fs-tools"
			echo "mkfs.f2fs -f $2"
			mkfs.f2fs -f $2
		;;
		jfs)
			fspkgs="${fspkgs[@]} jfsutils"
			echo "mkfs.jfs -f ${2}"
			mkfs.jfs -f ${2}
		;;
		reiserfs)
			fspkgs="${fspkgs[@]} reiserfsprogs"
			echo "mkfs.reiserfs -f ${2}"
			mkfs.reiserfs -f ${2}
		;;
		luks)
			echo "${txtcreateluksdevice}"
			echo "cryptsetup luksFormat ${2}"
			cryptsetup luksFormat ${2}
			if [ ! "$?" = "0" ]; then
				pressanykey
				return 1
			fi
			pressanykey
			echo ""
			echo "${txtopenluksdevice}"
			echo "cryptsetup luksOpen ${2} ${1}"
			cryptsetup luksOpen ${2} ${1}
			if [ ! "$?" = "0" ]; then
				pressanykey
				return 1
			fi
			pressanykey
			options=()
			options+=("normal" "")
			options+=("fast" "")
			sel=$(whiptail --backtitle "${apptitle}" --title "${txtformatdevice}" --menu "Wipe device ?" --cancel-button="${txtignore}" 0 0 0 \
				"${options[@]}" \
				3>&1 1>&2 2>&3)
			if [ "$?" = "0" ]; then
				case ${sel} in
					normal)
						echo "dd if=/dev/zero of=/dev/mapper/${1}"
						dd if=/dev/zero of=/dev/mapper/${1} & PID=$! &>/dev/null
					;;
					fast)
						echo "dd if=/dev/zero of=/dev/mapper/${1} bs=60M"
						dd if=/dev/zero of=/dev/mapper/${1} bs=60M & PID=$! &>/dev/null
					;;
				esac
				clear
				sleep 1
				while kill -USR1 ${PID} &>/dev/null
				do
					sleep 1
				done
			fi
			echo ""
			pressanykey
			formatdevice ${1} /dev/mapper/${1} noluks
			if [ "${1}" = "root" ]; then
				realrootdev=${rootdev}
				rootdev=/dev/mapper/${1}
				luksroot=1
				luksrootuuid=$(cryptsetup luksUUID ${2})
			else
				case ${1} in
					home) homedev=/dev/mapper/${1} ;;
				esac
				luksdrive=1
				crypttab="\n${1}    UUID=$(cryptsetup luksUUID ${2})    none"
			fi
			echo ""
			echo "${txtluksdevicecreated}"
		;;
	esac
	echo ""
	pressanykey
}

mountparts(){
	clear
	echo "mount ${rootdev} /mnt"
	mount ${rootdev} /mnt
	echo "mkdir /mnt/{boot,home}"
	mkdir /mnt/{boot,home} 2>/dev/null
	if [ ! "${bootdev}" = "" ]; then
		echo "mount ${bootdev} /mnt/boot"
		mount ${bootdev} /mnt/boot
	fi
	if [ ! "${swapdev}" = "" ]; then
		echo "swapon ${swapdev}"
		swapon ${swapdev}
	fi
	if [ ! "${homedev}" = "" ]; then
		echo "mount ${homedev} /mnt/home"
		mount ${homedev} /mnt/home
	fi
	pressanykey
}

rankmirrors() {
  print_title "${txtrankmirrors}..."
  pacman -Sy --needed pacman-contrib --noconfirm
  if [[ ! -f /etc/pacman.d/mirrorlist.backup ]]; then
    cp /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist.backup
  fi
  curl -so "/etc/pacman.d/mirrorlist.tmp" "https://www.archlinux.org/mirrorlist/?country=BR&use_mirror_status=on"
  sed -i 's/^#Server/Server/g' "/etc/pacman.d/mirrorlist.tmp"
  rankmirrors /etc/pacman.d/mirrorlist.tmp > /etc/pacman.d/mirrorlist
  rm /etc/pacman.d/mirrorlist.tmp
  chmod +r /etc/pacman.d/mirrorlist
  nano /etc/pacman.d/mirrorlist
  print_warning "${txtfinished}"
  pressanykey
}
# --------------------------------------------------------

installbase() {
	pkgs="base base-devel linux-firmware"
	options=()
	options+=("linux" "")
	options+=("linux-lts" "")
	options+=("linux-zen" "")
	options+=("linux-hardened" "")
	KERNEL_VER=$(whiptail --backtitle "${apptitle}" --title "${txtinstallarchlinuxkernel}" --menu "" 0 0 0 \
		"${options[@]}" \
		3>&1 1>&2 2>&3)
	if [ "$?" = "0" ]; then
		pkgs+=" ${KERNEL_VER} ${KERNEL_VER}-headers"
	else
		return 1
	fi
  # ---
	options=()
	if [[ "${fspkgs}" == *"dosfstools"* ]]; then
		options+=("dosfstools" "" on)
	else
		options+=("dosfstools" "" off)
	fi
	if [[ "${fspkgs}" == *"btrfs-progs"* ]]; then
		options+=("btrfs-progs" "" on)
	else
		options+=("btrfs-progs" "" off)
	fi
	if [[ "${fspkgs}" == *"xfsprogs"* ]]; then
		options+=("xfsprogs" "" on)
	else
		options+=("xfsprogs" "" off)
	fi
	if [[ "${fspkgs}" == *"f2fs-tools"* ]]; then
		options+=("f2fs-tools" "" on)
	else
		options+=("f2fs-tools" "" off)
	fi
	if [[ "${fspkgs}" == *"jfsutils"* ]]; then
		options+=("jfsutils" "" on)
	else
		options+=("jfsutils" "" off)
	fi
	if [[ "${fspkgs}" == *"reiserfsprogs"* ]]; then
		options+=("reiserfsprogs" "" on)
	else
		options+=("reiserfsprogs" "" off)
	fi
	options+=("lvm2" "" off)
	options+=("dmraid" "" off)
	sel=$(whiptail --backtitle "${apptitle}" --title "${txtinstallarchlinuxfilesystems}" --checklist "" 0 0 0 \
		"${options[@]}" \
		3>&1 1>&2 2>&3)
	if [ ! "$?" = "0" ]; then
		return 1
	fi
	for itm in $sel; do
		pkgs="$pkgs $(echo $itm | sed 's/"//g')"
	done
	
  print_title "${txtinstallbase}..."
	echo "pacstrap /mnt ${pkgs}"
	pacstrap /mnt ${pkgs}
	print_warning "${txtfinished}"
	pressanykey
}

installessentialpkgs() {
  pkgs=""
  options=()
  options+=("inetutils" "" on)
  options+=("mtools" "" on)
  options+=("udisks2" "" on)
  options+=("nano" "" on)
  options+=("dialog" "" on)
  options+=("bash-completion" "" on)
  options+=("wget" "" on)
  sel=$(whiptail --backtitle "${apptitle}" --title "${txtinstallessentialpkgs}" --checklist "" 0 0 0 \
			"${options[@]}" \
			3>&1 1>&2 2>&3)
		if [ ! "$?" = "0" ]; then
			return 1
		fi
  print_title "${txtinstallessentialpkgs}..."
  for itm in $sel; do
		pkgs="$pkgs $(echo $itm | sed 's/"//g')"
	done
  pacstrap /mnt ${pkgs}
  print_warning "${txtfinished}"
  pressanykey
}

installnetwork() {
  print_title "${txtinstallnetwork}..."
  pacstrap /mnt networkmanager
	echo "systemctl enable NetworkManager"
  arch-chroot /mnt systemctl enable NetworkManager
	exit
  print_warning "${txtfinished}"
  pressanykey
}

generatefstab() {
	options=()
	options+=("PARTUUID" "genfstab -t PARTUUID")
	options+=("UUID" "genfstab -U")
	options+=("LABEL" "genfstab -L")
	options+=("PARTLABEL" "genfstab -t PARTLABEL")
	sel=$(whiptail --backtitle "${apptitle}" --title "${txtgenerate//%1/fstab}" --menu "" --cancel-button "${txtback}" --default-item "${nextitem}" 0 0 0 \
		"${options[@]}" \
		3>&1 1>&2 2>&3)
	if [ "$?" = "0" ]; then
    print_title "${txtgeneratefstab}..."
		case ${sel} in
			"PARTUUID")
				echo "genfstab -t PARTUUID -p /mnt > /mnt/etc/fstab"
				genfstab -t PARTUUID -p /mnt > /mnt/etc/fstab
			;;
			"UUID")
				echo "genfstab -U -p /mnt > /mnt/etc/fstab"
				genfstab -U -p /mnt > /mnt/etc/fstab
			;;
			"LABEL")
				echo "genfstab -L -p /mnt > /mnt/etc/fstab"
				genfstab -L -p /mnt > /mnt/etc/fstab
			;;
			"PARTLABEL")
				echo "genfstab -t PARTLABEL -p /mnt > /mnt/etc/fstab"
				genfstab -t PARTLABEL -p /mnt > /mnt/etc/fstab
			;;
		esac
	fi
  print_warning "${txtfinished}"
	pressanykey
}

sethostname(){
	hostname=$(whiptail --backtitle "${apptitle}" --title "${txtsethostname}" --inputbox "" 0 0 "archlinux" 3>&1 1>&2 2>&3)
	if [ "$?" = "0" ]; then
		print_title "${txtsethostname}..."
		echo "echo \"${hostname}\" > /mnt/etc/hostname"
		echo "${hostname}" > /mnt/etc/hostname
    echo -e "127.0.0.1 localhost.localdomain localhost\n::1 localhost.localdomain localhost\n127.0.1.1 ${hostname}.localdomain ${hostname}" > /mnt/etc/hosts
    print_warning "${txtfinished}"
		pressanykey
	fi
}

setlocale(){
	items=$(ls /usr/share/i18n/locales)
	options=()
	defsel=""
	for item in ${items}; do
		if [ "${defsel}" == "" ]&&[ "${keymap::2}" == "${item::2}" ]; then
			defsel="${item}"
		fi
		options+=("${item}" "")
	done
	locale=$(whiptail --backtitle "${apptitle}" --title "${txtsetlocale}" --menu "" --default-item "${defsel}" 0 0 0 \
		"${options[@]}" \
		3>&1 1>&2 2>&3)
	if [ "$?" = "0" ]; then
		print_title "${txtsetlocale}..."
		echo "echo \"LANG=${locale}.UTF-8\" > /mnt/etc/locale.conf"
		echo "LANG=${locale}.UTF-8" > /mnt/etc/locale.conf
		echo "echo \"LC_COLLATE=C\" >> /mnt/etc/locale.conf"
		echo "LC_COLLATE=C" >> /mnt/etc/locale.conf
		echo "sed -i 's/#\('${locale}'\)/\1/' /mnt}/etc/locale.gen"
		sed -i 's/#\('${locale}'\)/\1/' /mnt/etc/locale.gen
		echo "locale-gen"
		arch-chroot /mnt locale-gen
		exit
    print_warning "${txtfinished}"
		pressanykey
	fi
}

settimezone() {
	items=$(ls -l /mnt/usr/share/zoneinfo/ | grep '^d' | gawk -F':[0-9]* ' '/:/{print $2}')
	options=()
	for item in ${items}; do
		options+=("${item}" "")
	done

	timezone=$(whiptail --backtitle "${apptitle}" --title "${txtsettime}" --menu "" 0 0 0 \
		"${options[@]}" \
		3>&1 1>&2 2>&3)
	if [ ! "$?" = "0" ]; then
		return 1
	fi


	items=$(ls /mnt/usr/share/zoneinfo/${timezone}/)
	options=()
	for item in ${items}; do
		options+=("${item}" "")
	done

	timezone=${timezone}/$(whiptail --backtitle "${apptitle}" --title "${txtsettime}" --menu "" 0 0 0 \
		"${options[@]}" \
		3>&1 1>&2 2>&3)
	if [ ! "$?" = "0" ]; then
		return 1
	fi

	print_title "${txtsettimezone}..."
	echo "ln -sf /mnt/usr/share/zoneinfo/${timezone} /mnt/etc/localtime"
	ln -sf /usr/share/zoneinfo/${timezone} /mnt/etc/localtime
  print_warning "${txtfinished}"
	pressanykey

	options=()
	options+=("UTC" "")
	options+=("Local" "")
	sel=$(whiptail --backtitle "${apptitle}" --title "${txtsettime}" --menu "${txthwclock}" 0 0 0 \
		"${options[@]}" \
		3>&1 1>&2 2>&3)
	if [ ! "$?" = "0" ]; then
		return 1
	fi
	
  print_title "${txtsettime}..."
	case ${sel} in
		"${txthwclockutc}")
			echo "hwclock --systohc --utc"
			arch-chroot /mnt hwclock --systohc --utc
			exit
		;;
		"${txthwclocklocal}")
			echo "hwclock --systohc --localtime"
			arch-chroot /mnt hwclock --systohc --localtime
			exit
		;;
	esac
  print_warning "${txtfinished}"
	pressanykey
}

setkeymap() {
	items=$(find /usr/share/kbd/keymaps/ -type f -printf "%f\n" | sort -V)
	options=()
	defsel=""
	for item in ${items}; do
		if [ "${item%%.*}" == "${keymap}" ]; then
			defsel="${item%%.*}"
		fi
		options+=("${item%%.*}" "")
	done
	keymap=$(whiptail --backtitle "${apptitle}" --title "${txtsetkeymap}" --menu "" --default-item "${defsel}" 0 0 0 \
		"${options[@]}" \
		3>&1 1>&2 2>&3)
	if [ "$?" = "0" ]; then
		print_title "${txtsetkeymap}..."
		echo "echo \"KEYMAP=${keymap}\" > /mnt/etc/vconsole.conf"
		echo "KEYMAP=${keymap}" > /mnt/etc/vconsole.conf
    print_warning "${txtfinished}"
		pressanykey
	fi
}

generatemkinitcpio() {
  print_title "${txtgeneratemkinitcpio}..."
  echo "mkinitcpio -p ${KERNEL_VER}"
  arch-chroot /mnt mkinitcpio -p ${KERNEL_VER}
	exit
  print_warning "${txtfinished}"
  pressanykey  
}

installgrub() {
  print_title "${txtinstallgrub}..."
  pacstrap /mnt grub-efi-x86_64 efibootmgr os-prober
	echo "grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=Arch --recheck"
  arch-chroot /mnt grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=Arch --recheck
	echo ""
	echo "grub-mkconfig -o /boot/grub/grub.cfg"
  arch-chroot /mnt grub-mkconfig -o /boot/grub/grub.cfg
	exit
  print_warning "${txtfinished}"
  pressanykey  
}

setrootpassword() {
  print_title "${txtsetrootpassword}..."
  arch-chroot /mnt passwd
  print_warning "${txtfinished}"
  pressanykey
}

reset() {
  print_title "${txtreset}..."
  unmountdevices
  print_warning "${txtfinished}"
  pressanykey
}

rebootpc() {
	if (whiptail --backtitle "${apptitle}" --title "${txtreboot}" --yesno "${txtreboot} ?" --defaultno 0 0) then
		clear
		reboot
	fi
}

unmountdevices() {
	echo "umount -R /mnt"
	umount -R /mnt
	if [ ! "${swapdev}" = "" ]; then
		echo "swapoff ${swapdev}"
		swapoff ${swapdev}
	fi
  print_warning "${txtfinished}"
	pressanykey
}


# --------------------------------------------------------



# --------------------------------------------------------

archchroot(){
	echo "arch-chroot /mnt /root"
	cp ${0} /mnt/root
	chmod 755 /mnt/root/$(basename "${0}")
	arch-chroot /mnt /root/$(basename "${0}") --chroot ${1} ${2}
	rm /mnt/root/$(basename "${0}")
	echo "exit"
}

archsetfont(){
	items=$(find /usr/share/kbd/consolefonts/*.psfu.gz -printf "%f\n")

	options=()
	for item in ${items}; do
		options+=("${item%%.*}" "")
	done
	vcfont=$(whiptail --backtitle "${apptitle}" --title "${txtsetfont} (${txtoptional})" --menu "" 0 0 0 \
		"${options[@]}" \
		3>&1 1>&2 2>&3)
	if [ "$?" = "0" ]; then
		clear
		echo "echo \"FONT=${vcfont}\" >> /mnt/etc/vconsole.conf"
		echo "FONT=${vcfont}" >> /mnt/etc/vconsole.conf
		pressanykey
	fi
}
archsetlocalechroot(){
	echo "locale-gen"
	locale-gen
	exit
}
archsettimeutcchroot(){
	echo "hwclock --systohc --utc"
	hwclock --systohc --utc
	exit
}

archsetrootpassword(){
	clear
	archchroot setrootpassword
	pressanykey
}
archsetrootpasswordchroot(){
	echo "passwd root"
	passed=1
	while [[ ${passed} != 0 ]]; do
		passwd root
		passed=$?
	done
	exit
}

archgencrypttab(){
	clear
	echo "echo -e \"${crypttab}\" >> /mnt/etc/crypttab"
	echo -e "${crypttab}" >> /mnt/etc/crypttab
	pressanykey
}

archgenmkinitcpioluks(){
	clear
	echo "sed -i \"s/block filesystems/block encrypt filesystems/g\" /mnt/etc/mkinitcpio.conf"
	sed -i "s/block filesystems/block encrypt filesystems/g" /mnt/etc/mkinitcpio.conf
	archchroot genmkinitcpio
	pressanykey
}
archgenmkinitcpionvme(){
	clear
	echo "sed -i \"s/MODULES=()/MODULES=(nvme)/g\" /mnt/etc/mkinitcpio.conf"
	sed -i "s/MODULES=()/MODULES=(nvme)/g" /mnt/etc/mkinitcpio.conf
	archchroot genmkinitcpio
	pressanykey
}

archeditmkinitcpio(){
	${EDITOR} /mnt/etc/mkinitcpio.conf
	if (whiptail --backtitle "${apptitle}" --title "${txtedit//%1/mkinitcpio.conf}" --yesno "${txtgenerate//%1/mkinitcpio} ?" 0 0) then
		clear
		archchroot genmkinitcpio
		pressanykey
	fi
}
archgenmkinitcpiochroot(){
	echo "mkinitcpio -p linux"
	mkinitcpio -p linux
	exit
}

# --------------------------------------------------------

# ======================================================================#
# >>>           OUTRAS FUNÇÕES
# ----------------------------------------------------------------------#

print_line() {
  printf "%$(tput cols)s\n"|tr ' ' '-'
}

print_title() {
  clear
  print_line
  local TITLE="$1"
  echo -e "${BRed}# ${TITLE^^}${Reset}"
  print_line
  echo ""
}

print_warning() {
  T_COLS=$(tput cols)
  echo -e "\n${BGreen} $1${Reset}\n" | fold -sw $(( T_COLS - 1 ))
}

contains_element() {
    for e in "${@:2}"; do [[ "$e" == "$1" ]] && break; done;
}

pressanykey() {
	print_line
  read -e -sn 1 -p "${txtpressanykey}"
}

# --------------------------------------------------------

loadstrings(){

	locale=pt_BR

	txtexit="Exit"
	txtback="Back"
	txtignore="Ignore"

	txtmainmenu="Main Menu"
	txtsetloadkeys="Set console keymap layout"
  txttimesync="Clock sync"
	txtdiskpartmenu="Disk partitions"
	txtselectpartsmenu="Select partitions"
  txtrankmirrors="Rank mirrors"
  txtinstallbase="Base packages install"
  txtinstallessentialpkgs="Essential packages install"
  txtinstallnetwork="Network install"
	txtgeneratefstab="Fstab generate"
	txtsethostname="Set computer name"
	txtsetlocale="Set locale"
  txtsettimezone="Set timezone"
	txtsetkeymap="Set keymap layout"
	txtgeneratemkinitcpio="Mkinitcpio generate"
	txtinstallgrub="Install bootloader GRUB"
	txtsetrootpassword="Set root password"
	txthelp="Help"
	txtchangelog="Changelog"
  txtreset="Reset"
	txtreboot="Reboot"

	txteditparts="Edit Partitions"

	txtselectdevice="Select %1 device :"
	txtselecteddevices="Selected devices :"

	txtformatmountmenu="Format and Mount"
	txtformatdevices="Format devices"
	txtformatdevice="Format device"
	txtmount="Mount"
	txtunmount="Unmount"
	txtmountdesc="Install and configure"

	txtformatdeviceconfirm="Warning, all data on selected devices will be erased ! \nFormat devices ?"

	txtselectpartformat="Select partition format for %1 :"

	txtselectcountry="Select country"
	txtinstallarchlinux="Install Arch Linux"
	txtinstallarchlinuxkernel="Kernel"
	txtinstallarchlinuxfilesystems="File Systems"

	txtsettime="Set Time"

	txthwclock="Hardware clock :"
	txthwclockutc="UTC"
	txthwclocklocal="Local"

	txtbootloader="Bootloader"

	txtoptional="Optional"
	txtrecommandeasyinst="Recommanded for easy install"
	txtset="Set %1"
	txtgenerate="Generate %1"
	txtedit="Edit %1"
	txtinstall="Install %1"
	txtenable="Enable %1"

	txtpressanykey="Press any key to continue..."
  txtfinished=" OK!"
}

# --------------------------------------------------------



# --------------------------------------------------------
while (( "$#" )); do
	case ${1} in
		--help)
			echo "archfi"
			echo "------"
			echo "-cpl | --custom-package-list url  Set custom package list url"     
			echo "-sf | --skip-font                 Skip setfont from language files"
			echo "-efiX                             -efi0 : disable EFI, -efi1 efi inst, -efi2 efi hybrid inst"
			echo "-t | --test ghusername ghbranch   Test archfi script and language"
			exit 0
		;;
		-cpl | --custom-package-list)
			curl -L ${2} > /tmp/archfi-custom-package-list
			if [[ "$?" != "0" ]]; then
				echo "Error downloading custom package list"
				exit 0
			fi
			cpl=1
		;;
		-sf | --skip-font) skipfont=1;;
		-t | --test)
			wget -O archfi https://raw.githubusercontent.com/${2}/archfi/${3}/archfi
			sh archfi -tt ${2} ${3}
			exit 0
		;;
		-tt) baseurl="https://raw.githubusercontent.com/${2}/archfi/${3}";;
		-efi0) efimode=0;;
		-efi1)
			eficomputer=1
			efimode=1
		;;
		-efi2)
			eficomputer=1
			efimode=2
		;;
		--chroot) chroot=1
							command=${2}
							args=${3};;
	esac
	shift
done

pacman -S --needed arch-install-scripts wget libnewt
dmesg |grep efi: > /dev/null
if [ "$?" == "1" ]; then
	if [ "${eficomputer}" != "1" ]; then
		eficomputer=0
	fi
else
	eficomputer=1
	if [ "${efimode}" == "" ]; then
		efimode=1
	fi
fi
loadstrings
EDITOR=nano
LANG="en_US.UTF-8"
mainmenu

exit 0
# --------------------------------------------------------
