#!/bin/bash

# Arch Linux Install
# --------------------------------
# author    : stenioas
#             https://github.com/stenioas
# project   : https://github.com/stenioas/myarch
# license   : LGPL-3.0 (http://opensource.org/licenses/lgpl-3.0.html)
#
# referance : https://github.com/MatMoul/archfi
# reference : https://github.com/helmuthdu/aui

# ======================================================================#
# >>>           PARÂMETROS INICIAIS
# ----------------------------------------------------------------------#

export LANG="${NEW_LANGUAGE}.UTF-8"
export EDITOR=nano

# ======================================================================#
# >>>           VARIÁVEIS
# ----------------------------------------------------------------------#

# --- COLORS
  Bold=$(tput bold)
  Underline=$(tput sgr 0 1)
  Reset=$(tput sgr0)
  # Regular Colors
  Red=$(tput setaf 1)
  Green=$(tput setaf 2)
  Yellow=$(tput setaf 3)
  Blue=$(tput setaf 4)
  Purple=$(tput setaf 5)
  Cyan=$(tput setaf 6)
  White=$(tput setaf 7)
  # Bold
  BRed=${Bold}${Red}
  BGreen=${Bold}${Green}
  BYellow=${Bold}${Yellow}
  BBlue=${Bold}${Blue}
  BPurple=${Bold}${Purple}
  BCyan=${Bold}${Cyan}
  BWhite=${Bold}${White}

# ---     ESSENTIALS
  FILESYSTEM="btrfs"
  KERNEL_VER="linux-lts"
  NEW_LANGUAGE="pt_BR"
  NEW_ZONE="America"
  NEW_SUBZONE="Fortaleza"
  NEW_USER="user"
  NEW_HOSTNAME="archlinux"
  TRIM=0

# ---     MOUNTPOINTS
  EFI_PARTITION="/dev/sda1"
  EFI_MOUNTPOINT="/boot/efi"
  SWAP_PARTITION="/dev/sda2"
  ROOT_PARTITION="/dev/sda3"
  ROOT_MOUNTPOINT="/mnt"
  BOOT_MOUNTPOINT="/boot"
  INSTALL_DISK="/dev/sda"

# ---     PROMPT
  prompt1="Opção: "

# ---     OTHERS
  apptitle="Arch Linux Install"
  baseurl=https://raw.githubusercontent.com/stenioas/myarch/master
  cpl=0
  skipfont="0"
  fspkgs=""


# --------------------------------------------------------
mainmenu(){
	if [ "${1}" = "" ]; then
		nextitem="."
	else
		nextitem=${1}
	fi
	options=()
	options+=("${txtinitial}" "(Redefinir ...)")
	options+=("${txttimesync}" "(timedatectl ...)")
	options+=("${txtdiskpartmenu}" "")
	options+=("${txtselectpartsmenu}" "")
	options+=("${txtrankmirrors}" "")
	options+=("${txtinstallbase}" "")
	options+=("${txtinstallessentialpkgs}" "")
	options+=("${txtinstallnetwork}" "")
	options+=("${txtgeneratefstab}" "")
	options+=("${txtsethostname}" "")
	options+=("${txtsetlocale}" "")
	options+=("${txtsettimezone}" "")
	options+=("${txtsetkeymap}" "(KEYMAP= ...)")
	options+=("${txtgeneratemkinitcpio}" "(mkinitcpio ...)")
	options+=("${txtinstallgrub}" "")
	options+=("${txtsetrootpasswd}" "(passwd ...)")
	options+=("" "")
	options+=("${txtreboot}" "")
	sel=$(whiptail --backtitle "${apptitle}" --title "${txtmainmenu}" --menu "" --cancel-button "${txtexit}" --default-item "${nextitem}" 0 0 0 \
		"${options[@]}" \
		3>&1 1>&2 2>&3)
	if [ "$?" = "0" ]; then
		case ${sel} in
			"${txtinitial}")
				initial
				nextitem="${txtsetkeymap}"
			;;
			"${txttimesync}")
				settimesync
				nextitem="${txtdiskpartmenu}"
			;;
			"${txtdiskpartmenu}")
				diskpartmenu
				nextitem="${txtselectpartsmenu}"
			;;
			"${txtselectpartsmenu}")
				selectparts
				nextitem="${txtrankmirrors}"
			;;
			"${txtrankmirrors}")
				rankmirrors
				nextitem="${txtinstallbase}"
			;;
			"${txtinstallbase}")
				installbase
				nextitem="${txtinstallessentialpkgs}"
			;;
			"${txtinstallessentialpkgs}")
				installessentialpkgs
				nextitem="${txtinstallnetwork}"
			;;
			"${txtinstallnetwork}")
				installnetwork
				nextitem="${txtgeneratefstab}"
			;;
			"${txtgeneratefstab}")
				generatefstab
				nextitem="${txtsethostname}"
			;;
			"${txtsethostname}")
				sethostname
				nextitem="${txtsetlocale}"
			;;
			"${txtsetlocale}")
				setlocale
				nextitem="${txtsetkeymap}"
			;;
			"${txtsettimezone}")
				settimezone
				nextitem="${txtsettimezone}"
			;;
			"${txtsetkeymap}")
				setkeymap
				nextitem="${txtgeneratemkinitcpio}"
			;;
			"${txtgeneratemkinitcpio}")
				generatemkinitcpio
				nextitem="${txtinstallgrub}"
			;;
			"${txtinstallgrub}")
				installgrub
				nextitem="${txtsetrootpasswd}"
			;;
			"${txtsetrootpasswd}")
				setrootpasswd
				nextitem="${txtreboot}"
			;;
			"${txthelp}")
				help
				nextitem="${txtreboot}"
			;;
			"${txtchangelog}")
				showchangelog
				nextitem="${txtreboot}"
			;;
			"${txtreboot}")
				rebootpc
				nextitem="${txtreboot}"
			;;
		esac
		mainmenu "${nextitem}"
	else
		clear
	fi
}

initial() {
  print_title "PREPARANDO INSTALAÇÃO..."
  unmountdevices
  print_warning " CONCLUÍDO!"
  pressanykey
}

settimesync() {
  print_title "SINCRONIZANDO RELÓGIO COM A INTERNET..."
  timedatectl set-ntp true
  print_warning " CONCLUÍDO!"
  pressanykey
}

selectdisk() {
	items=$(lsblk -d -p -n -l -o NAME,SIZE -e 7,11)
	options=()
	IFS_ORIG=$IFS
	IFS=$'\n'
	for item in ${items}
	do  
			options+=("${item}" "")
	done
	IFS=$IFS_ORIG
	result=$(whiptail --backtitle "${APPTITLE}" --title "${1}" --menu "" 0 0 0 "{options[@]}" 3>&1 1>&2 2>&3)
	if [ "$?" != "0" ]
	then
			return 1
	fi
	echo ${result%%\ *}
	return 0    
}

diskpartmenu() {
	device=$( selectdisk "${txteditparts} (cfdisk)" )
	if [ "$?" = "0" ]; then
		clear
		cfdisk ${device}
	fi
}

selectparts() {
	items=$(lsblk -p -n -l -o NAME -e 7,11)
	options=()
	for item in ${items}; do
		options+=("${item}" "")
	done

	bootdev=$(whiptail --backtitle "${apptitle}" --title "${txtselectpartsmenu}" --menu "${txtselectdevice//%1/boot}" --default-item "${bootdev}" 0 0 0 \
		"none" "-" \
		"${options[@]}" \
		3>&1 1>&2 2>&3)
	if [ ! "$?" = "0" ]; then
		return 1
	else
		if [ "${bootdev}" = "none" ]; then
			bootdev=
		fi
	fi

	swapdev=$(whiptail --backtitle "${apptitle}" --title "${txtselectpartsmenu}" --menu "${txtselectdevice//%1/swap}" --default-item "${swapdev}" 0 0 0 \
		"none" "-" \
		"${options[@]}" \
		3>&1 1>&2 2>&3)
	if [ ! "$?" = "0" ]; then
		return 1
	else
		if [ "${swapdev}" = "none" ]; then
			swapdev=
		fi
	fi

	rootdev=$(whiptail --backtitle "${apptitle}" --title "${txtselectpartsmenu}" --menu "${txtselectdevice//%1/root}" --default-item "${rootdev}" 0 0 0 \
		"${options[@]}" \
		3>&1 1>&2 2>&3)
	if [ ! "$?" = "0" ]; then
		return 1
	fi
	realrootdev=${rootdev}

	homedev=$(whiptail --backtitle "${apptitle}" --title "${txtselectpartsmenu}" --menu "${txtselectdevice//%1/home}" 0 0 0 \
		"none" "-" \
		"${options[@]}" \
		3>&1 1>&2 2>&3)
	if [ ! "$?" = "0" ]; then
		return 1
	else
		if [ "${homedev}" = "none" ]; then
			homedev=
		fi
	fi

	msg="${txtselecteddevices}\n\n"
	msg=${msg}"boot : "${bootdev}"\n"
	msg=${msg}"swap : "${swapdev}"\n"
	msg=${msg}"root : "${rootdev}"\n"
	msg=${msg}"home : "${homedev}"\n\n"
	if (whiptail --backtitle "${apptitle}" --title "${txtselectpartsmenu}" --yesno "${msg}" 0 0) then
		isnvme=0
		if [ "${bootdev::8}" == "/dev/nvm" ]; then
			isnvme=1
		fi
		if [ "${rootdev::8}" == "/dev/nvm" ]; then
			isnvme=1
		fi
		mountmenu
	fi
}

mountmenu() {
	if [ "${1}" = "" ]; then
		nextitem="."
	else
		nextitem=${1}
	fi
	options=()
	options+=("${txtformatdevices}" "")
	options+=("${txtmount}" "${txtmountdesc}")
	sel=$(whiptail --backtitle "${apptitle}" --title "${txtformatmountmenu}" --menu "" --cancel-button "${txtback}" --default-item "${nextitem}" 0 0 0 \
		"${options[@]}" \
		3>&1 1>&2 2>&3)
	if [ "$?" = "0" ]; then
		case ${sel} in
			"${txtformatdevices}")
				formatdevices
				nextitem="${txtmount}"
			;;
			"${txtmount}")
				mountparts
				nextitem="${txtmount}"
			;;
		esac
		mountmenu "${nextitem}"
	fi
}


formatdevices(){
	if (whiptail --backtitle "${apptitle}" --title "${txtformatdevices}" --yesno "${txtformatdeviceconfirm}" --defaultno 0 0) then
		fspkgs=""
		if [ ! "${bootdev}" = "" ]; then
			formatbootdevice boot ${bootdev}
		fi
		if [ ! "${swapdev}" = "" ]; then
			formatswapdevice swap ${swapdev}
		fi
		formatdevice root ${rootdev}
		if [ ! "${homedev}" = "" ]; then
			formatdevice home ${homedev}
		fi
	fi
}
formatbootdevice(){
	options=()
	if [ "${efimode}" == "1" ]||[ "${efimode}" = "2" ]; then
		options+=("fat32" "(EFI)")
	fi
	options+=("ext2" "")
	options+=("ext3" "")
	options+=("ext4" "")
	if [ ! "${efimode}" = "1" ]&&[ ! "${efimode}" = "2" ]; then
		options+=("fat32" "(EFI)")
	fi
	sel=$(whiptail --backtitle "${apptitle}" --title "${txtformatdevice}" --menu "${txtselectpartformat//%1/${1} (${2})}" 0 0 0 \
		"${options[@]}" \
		3>&1 1>&2 2>&3)
	if [ ! "$?" = "0" ]; then
		return 1
	fi
	case ${sel} in
		ext2)
	    print_title "FORMATANDO PARTIÇÃO DE BOOT"
			mkfs.ext2 ${2}
		;;
		ext3)
	    print_title "FORMATANDO PARTIÇÃO DE BOOT"
			mkfs.ext3 ${2}
		;;
		ext4)
	    print_title "FORMATANDO PARTIÇÃO DE BOOT"
			mkfs.ext4 ${2}
		;;
		fat32)
	    print_title "FORMATANDO PARTIÇÃO DE BOOT"
			fspkgs="${fspkgs[@]} dosfstools"
			mkfs.fat ${2}
		;;
	esac
	print_warning " CONCLUÍDO!"
	pressanykey
}
formatswapdevice() {
	options=()
	options+=("swap" "")
	sel=$(whiptail --backtitle "${apptitle}" --title "${txtformatdevice}" --menu "${txtselectpartformat//%1/${1} (${2})}" 0 0 0 \
		"${options[@]}" \
		3>&1 1>&2 2>&3)
	if [ ! "$?" = "0" ]; then
		return 1
	fi
	case ${sel} in
		swap)
	    print_title "FORMATANDO PARTIÇÃO SWAP..."
			mkswap ${swapdev}
			echo ""
			pressanykey
		;;
	esac
	clear
}
formatdevice(){
	options=()
	options+=("btrfs" "")
	options+=("ext4" "")
	options+=("ext3" "")
	options+=("ext2" "")
	options+=("xfs" "")
	options+=("f2fs" "")
	options+=("jfs" "")
	options+=("reiserfs" "")
	if [ ! "${3}" = "noluks" ]; then
		options+=("luks" "encrypted")
	fi
	sel=$(whiptail --backtitle "${apptitle}" --title "${txtformatdevice}" --menu "${txtselectpartformat//%1/${1} (${2})}" 0 0 0 \
		"${options[@]}" \
		3>&1 1>&2 2>&3)
	if [ ! "$?" = "0" ]; then
		return 1
	fi
	print_title "FORMATANDO PARTIÇÃO RAIZ..."
	case ${sel} in
		btrfs)
			fspkgs="${fspkgs[@]} btrfs-progs"
			echo "mkfs.btrfs -f ${2}"
			mkfs.btrfs -f ${2}
			if [ "${1}" = "root" ]; then
				echo "mount ${2} /mnt"
				echo "btrfs subvolume create /mnt/root"
				echo "btrfs subvolume set-default /mnt/root"
				echo "umount /mnt"
				mount ${2} /mnt
				btrfs subvolume create /mnt/root
				btrfs subvolume set-default /mnt/root
				umount /mnt
			fi
		;;
		ext4)
			echo "mkfs.ext4 ${2}"
			mkfs.ext4 ${2}
		;;
		ext3)
			echo "mkfs.ext3 ${2}"
			mkfs.ext3 ${2}
		;;
		ext2)
			echo "mkfs.ext2 ${2}"
			mkfs.ext2 ${2}
		;;
		xfs)
			fspkgs="${fspkgs[@]} xfsprogs"
			echo "mkfs.xfs -f ${2}"
			mkfs.xfs -f ${2}
		;;
		f2fs)
			fspkgs="${fspkgs[@]} f2fs-tools"
			echo "mkfs.f2fs -f $2"
			mkfs.f2fs -f $2
		;;
		jfs)
			fspkgs="${fspkgs[@]} jfsutils"
			echo "mkfs.jfs -f ${2}"
			mkfs.jfs -f ${2}
		;;
		reiserfs)
			fspkgs="${fspkgs[@]} reiserfsprogs"
			echo "mkfs.reiserfs -f ${2}"
			mkfs.reiserfs -f ${2}
		;;
		luks)
			echo "${txtcreateluksdevice}"
			echo "cryptsetup luksFormat ${2}"
			cryptsetup luksFormat ${2}
			if [ ! "$?" = "0" ]; then
				pressanykey
				return 1
			fi
			pressanykey
			echo ""
			echo "${txtopenluksdevice}"
			echo "cryptsetup luksOpen ${2} ${1}"
			cryptsetup luksOpen ${2} ${1}
			if [ ! "$?" = "0" ]; then
				pressanykey
				return 1
			fi
			pressanykey
			options=()
			options+=("normal" "")
			options+=("fast" "")
			sel=$(whiptail --backtitle "${apptitle}" --title "${txtformatdevice}" --menu "Wipe device ?" --cancel-button="${txtignore}" 0 0 0 \
				"${options[@]}" \
				3>&1 1>&2 2>&3)
			if [ "$?" = "0" ]; then
				case ${sel} in
					normal)
						echo "dd if=/dev/zero of=/dev/mapper/${1}"
						dd if=/dev/zero of=/dev/mapper/${1} & PID=$! &>/dev/null
					;;
					fast)
						echo "dd if=/dev/zero of=/dev/mapper/${1} bs=60M"
						dd if=/dev/zero of=/dev/mapper/${1} bs=60M & PID=$! &>/dev/null
					;;
				esac
				clear
				sleep 1
				while kill -USR1 ${PID} &>/dev/null
				do
					sleep 1
				done
			fi
			echo ""
			pressanykey
			formatdevice ${1} /dev/mapper/${1} noluks
			if [ "${1}" = "root" ]; then
				realrootdev=${rootdev}
				rootdev=/dev/mapper/${1}
				luksroot=1
				luksrootuuid=$(cryptsetup luksUUID ${2})
			else
				case ${1} in
					home) homedev=/dev/mapper/${1} ;;
				esac
				luksdrive=1
				crypttab="\n${1}    UUID=$(cryptsetup luksUUID ${2})    none"
			fi
			echo ""
			echo "${txtluksdevicecreated}"
		;;
	esac
	echo ""
	pressanykey
}

mountparts(){
	clear
	echo "mount ${rootdev} /mnt"
	mount ${rootdev} /mnt
	echo "mkdir /mnt/{boot,home}"
	mkdir /mnt/{boot,home} 2>/dev/null
	if [ ! "${bootdev}" = "" ]; then
		echo "mount ${bootdev} /mnt/boot"
		mount ${bootdev} /mnt/boot
	fi
	if [ ! "${swapdev}" = "" ]; then
		echo "swapon ${swapdev}"
		swapon ${swapdev}
	fi
	if [ ! "${homedev}" = "" ]; then
		echo "mount ${homedev} /mnt/home"
		mount ${homedev} /mnt/home
	fi
	pressanykey
}

rankmirrors() {
  print_title "RANKEANDO ESPELHOS DE REDE..."
  pacman -Sy --needed pacman-contrib --noconfirm
  if [[ ! -f /etc/pacman.d/mirrorlist.backup ]]; then
    cp /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist.backup
  fi
  countries_code=("AU" "AT" "BD" "BY" "BE" "BA" "BR" "BG" "CA" "CL" "CN" "CO" "HR" "CZ" "DK" "EC" "FI" "FR" "GE" "DE" "GR" "HK" "HU" "IS" "IN" "ID" "IR" "IE" "IL" "IT" "JP" "KZ" "KE" "LV" "LT" "LU" "NL" "NC" "NZ" "MK" "NO" "PY" "PH" "PL" "PT" "RO" "RU" "RS" "SG" "SK" "SI" "ZA" "KR" "ES" "SE" "CH" "TW" "TH" "TR" "UA" "GB" "US" "VN")
  countries_name=("Australia" "Austria" "Bangladesh" "Belarus" "Belgium" "Bosnia and Herzegovina" "Brazil" "Bulgaria" "Canada" "Chile" "China" "Colombia" "Croatia" "Czech Republic" "Denmark" "Ecuador" "Finland" "France" "Georgia" "Germany" "Greece" "Hong Kong" "Hungary" "Iceland" "India" "Indonesia" "Iran" "Ireland" "Israel" "Italy" "Japan" "Kazakhstan" "Kenya" "Latvia" "Lithuania" "Luxembourg" "Netherlands" "New Caledonia" "New Zealand" "North Macedonia" "Norway" "Paraguay" "Philippines" "Poland" "Portugal" "Romania" "Russia" "Serbia" "Singapore" "Slovakia" "Slovenia" "South Africa" "South Korea" "Spain" "Sweden" "Switzerland" "Taiwan" "Thailand" "Turkey" "Ukraine" "United Kingdom" "United States" "Viet Nam")

	country_name=$(whiptail --backtitle "${APPTITLE}" --title "${txtselectcountry}"--menu "" 0 0 0 "${countries_name[@]}" 3>&1 1>&2 2>&3)
	if [ "$?" != "0" ]; then
			return 1    
	fi
  if contains_element "$country_name" "${countries_name[@]}"; then
    country_code=${countries_code[$((REPLY - 1))]}
    break
  fi
  print_title "RANKEANDO ESPELHOS DE REDE..."
  curl -so "/etc/pacman.d/mirrorlist.tmp" "https://www.archlinux.org/mirrorlist/?country=${country_code}&use_mirror_status=on"
  sed -i 's/^#Server/Server/g' "/etc/pacman.d/mirrorlist.tmp"
  rankmirrors /etc/pacman.d/mirrorlist.tmp > /etc/pacman.d/mirrorlist
  rm /etc/pacman.d/mirrorlist.tmp
  chmod +r /etc/pacman.d/mirrorlist
  nano /etc/pacman.d/mirrorlist
  print_warning " CONCLUÍDO!"
  pressanykey
}
# --------------------------------------------------------

installbase() {
  print_title "INSTALANDO BASE DO SISTEMA..."
	pkgs="base base-devel linux-firmware"
	options=()
	options+=("linux" "")
	options+=("linux-lts" "")
	options+=("linux-zen" "")
	options+=("linux-hardened" "")
	KERNEL_VER=$(whiptail --backtitle "${apptitle}" --title "${txtinstallarchlinuxkernel}" --menu "" 0 0 0 \
		"${options[@]}" \
		3>&1 1>&2 2>&3)
	if [ "$?" = "0" ]; then
		pkgs+=" ${KERNEL_VER} ${KERNEL_VER}-headers"
	else
		return 1
	fi
  # ---
	options=()
	if [[ "${fspkgs}" == *"dosfstools"* ]]; then
		options+=("dosfstools" "" on)
	else
		options+=("dosfstools" "" off)
	fi
	if [[ "${fspkgs}" == *"btrfs-progs"* ]]; then
		options+=("btrfs-progs" "" on)
	else
		options+=("btrfs-progs" "" off)
	fi
	if [[ "${fspkgs}" == *"xfsprogs"* ]]; then
		options+=("xfsprogs" "" on)
	else
		options+=("xfsprogs" "" off)
	fi
	if [[ "${fspkgs}" == *"f2fs-tools"* ]]; then
		options+=("f2fs-tools" "" on)
	else
		options+=("f2fs-tools" "" off)
	fi
	if [[ "${fspkgs}" == *"jfsutils"* ]]; then
		options+=("jfsutils" "" on)
	else
		options+=("jfsutils" "" off)
	fi
	if [[ "${fspkgs}" == *"reiserfsprogs"* ]]; then
		options+=("reiserfsprogs" "" on)
	else
		options+=("reiserfsprogs" "" off)
	fi
	options+=("lvm2" "" off)
	options+=("dmraid" "" off)
	sel=$(whiptail --backtitle "${apptitle}" --title "${txtinstallarchlinuxfilesystems}" --checklist "" 0 0 0 \
		"${options[@]}" \
		3>&1 1>&2 2>&3)
	if [ ! "$?" = "0" ]; then
		return 1
	fi
	for itm in $sel; do
		pkgs="$pkgs $(echo $itm | sed 's/"//g')"
	done
	
	if [[ ${cpl} == 1 ]]; then
		sed -i '/^\s*$/d' /tmp/archfi-custom-package-list
		sed -i '/^#/ d' /tmp/archfi-custom-package-list
		options=()
		while read pkg; do
			options+=("${pkg}" "" on)
		done < /tmp/archfi-custom-package-list
		sel=$(whiptail --backtitle "${apptitle}" --title "${txtinstallarchlinuxcustompackagelist}" --checklist "" 0 0 0 \
			"${options[@]}" \
			3>&1 1>&2 2>&3)
		if [ ! "$?" = "0" ]; then
			return 1
		fi
		for itm in $sel; do
			pkgs="$pkgs $(echo $itm | sed 's/"//g')"
		done
	fi
	
	clear
	echo "pacstrap /mnt ${pkgs}"
	pacstrap /mnt ${pkgs}
	pressanykey
}

installessentialpkgs() {
  pkgs=""
  options=()
  options+=("inetutils" "" on)
  options+=("mtools" "" on)
  options+=("udisks2" "" on)
  options+=("nano" "" on)
  options+=("dialog" "" on)
  options+=("bash-completion" "" on)
  options+=("wget" "" on)
  sel=$(whiptail --backtitle "${apptitle}" --title "${txtinstallessentialpkgs}" --checklist "" 0 0 0 \
			"${options[@]}" \
			3>&1 1>&2 2>&3)
		if [ ! "$?" = "0" ]; then
			return 1
		fi
  print_title "INSTALANDO PACOTES ESSENCIAIS..."
  pacstrap /mnt ${pkgs}
  print_warning " CONCLUÍDO!"
  pressanykey
}

installnetwork() {
  print_title "INSTALANDO NETWORKMANAGER..."
  pacstrap /mnt networkmanager
  arch-chroot /mnt systemctl enable NetworkManager
  print_warning " CONCLUÍDO!"
  pressanykey
}

generatefstab(){
	options=()
	options+=("UUID" "genfstab -U")
	options+=("LABEL" "genfstab -L")
	options+=("PARTUUID" "genfstab -t PARTUUID")
	options+=("PARTLABEL" "genfstab -t PARTLABEL")
	sel=$(whiptail --backtitle "${apptitle}" --title "${txtgenerate//%1/fstab}" --menu "" --cancel-button "${txtback}" --default-item "${nextitem}" 0 0 0 \
		"${options[@]}" \
		3>&1 1>&2 2>&3)
	if [ "$?" = "0" ]; then
    print_title "GERANDO FSTAB..."
		case ${sel} in
			"UUID")
				clear
				echo "genfstab -U -p /mnt > /mnt/etc/fstab"
				genfstab -U -p /mnt > /mnt/etc/fstab
			;;
			"LABEL")
				clear
				echo "genfstab -L -p /mnt > /mnt/etc/fstab"
				genfstab -L -p /mnt > /mnt/etc/fstab
			;;
			"PARTUUID")
				clear
				echo "genfstab -t PARTUUID -p /mnt > /mnt/etc/fstab"
				genfstab -t PARTUUID -p /mnt > /mnt/etc/fstab
			;;
			"PARTLABEL")
				clear
				echo "genfstab -t PARTLABEL -p /mnt > /mnt/etc/fstab"
				genfstab -t PARTLABEL -p /mnt > /mnt/etc/fstab
			;;
		esac
	fi
  print_warning " CONCLUÍDO!"
	pressanykey
}

sethostname(){
	hostname=$(whiptail --backtitle "${apptitle}" --title "${txtsethostname}" --inputbox "" 0 0 "archlinux" 3>&1 1>&2 2>&3)
	if [ "$?" = "0" ]; then
		print_title "DEIFNINDO NOME DA MÁQUINA E CONFIGURANDO IP'S..."
		echo "echo \"${hostname}\" > /mnt/etc/hostname"
		echo "${hostname}" > /mnt/etc/hostname
    echo -e "127.0.0.1 localhost.localdomain localhost\n::1 localhost.localdomain localhost\n127.0.1.1 ${hostname}.localdomain ${hostname}" > /mnt/etc/hosts
    print_warning " CONCLUÍDO!"
		pressanykey
	fi
}

setlocale(){
	items=$(ls /usr/share/i18n/locales)
	options=()
	defsel=""
	for item in ${items}; do
		if [ "${defsel}" == "" ]&&[ "${keymap::2}" == "${item::2}" ]; then
			defsel="${item}"
		fi
		options+=("${item}" "")
	done
	locale=$(whiptail --backtitle "${apptitle}" --title "${txtsetlocale}" --menu "" --default-item "${defsel}" 0 0 0 \
		"${options[@]}" \
		3>&1 1>&2 2>&3)
	if [ "$?" = "0" ]; then
		print_title "CONFIGURANDO IDIOMA PADRÃO..."
		echo "echo \"LANG=${locale}.UTF-8\" > /mnt/etc/locale.conf"
		echo "LANG=${locale}.UTF-8" > /mnt/etc/locale.conf
		echo "echo \"LC_COLLATE=C\" >> /mnt/etc/locale.conf"
		echo "LC_COLLATE=C" >> /mnt/etc/locale.conf
		echo "sed -i 's/#\('${locale}'\)/\1/' /mnt}/etc/locale.gen"
		sed -i 's/#\('${locale}'\)/\1/' /mnt/etc/locale.gen
		arch-chroot /mnt locale-gen
    print_warning " CONCLUÍDO!"
		pressanykey
	fi
}

settimezone() {
	items=$(ls -l /mnt/usr/share/zoneinfo/ | grep '^d' | gawk -F':[0-9]* ' '/:/{print $2}')
	options=()
	for item in ${items}; do
		options+=("${item}" "")
	done

	timezone=$(whiptail --backtitle "${apptitle}" --title "${txtsettime}" --menu "" 0 0 0 \
		"${options[@]}" \
		3>&1 1>&2 2>&3)
	if [ ! "$?" = "0" ]; then
		return 1
	fi


	items=$(ls /mnt/usr/share/zoneinfo/${timezone}/)
	options=()
	for item in ${items}; do
		options+=("${item}" "")
	done

	timezone=${timezone}/$(whiptail --backtitle "${apptitle}" --title "${txtsettime}" --menu "" 0 0 0 \
		"${options[@]}" \
		3>&1 1>&2 2>&3)
	if [ ! "$?" = "0" ]; then
		return 1
	fi

	print_title "CONFIGURANDO FUSO HORÁRIO..."
	echo "ln -sf /mnt/usr/share/zoneinfo/${timezone} /mnt/etc/localtime"
	ln -sf /usr/share/zoneinfo/${timezone} /mnt/etc/localtime
  print_warning " CONCLUÍDO!"
	pressanykey

	options=()
	options+=("UTC" "")
	options+=("Local" "")
	sel=$(whiptail --backtitle "${apptitle}" --title "${txtsettime}" --menu "${txthwclock}" 0 0 0 \
		"${options[@]}" \
		3>&1 1>&2 2>&3)
	if [ ! "$?" = "0" ]; then
		return 1
	fi
	
  print_title "CONFIGURANDO RELÓGIO..."
	case ${sel} in
		"${txthwclockutc}")
			archchroot settimeutc
		;;
		"${txthwclocklocal}")
			archchroot settimelocal
		;;
	esac
  print_warning " CONCLUÍDO!"
	pressanykey
}

setkeymap() {
	items=$(find /usr/share/kbd/keymaps/ -type f -printf "%f\n" | sort -V)
	options=()
	defsel=""
	for item in ${items}; do
		if [ "${item%%.*}" == "${keymap}" ]; then
			defsel="${item%%.*}"
		fi
		options+=("${item%%.*}" "")
	done
	keymap=$(whiptail --backtitle "${apptitle}" --title "${txtsetkeymap}" --menu "" --default-item "${defsel}" 0 0 0 \
		"${options[@]}" \
		3>&1 1>&2 2>&3)
	if [ "$?" = "0" ]; then
		print_title "CONFIGURANDO TECLADO..."
		echo "echo \"KEYMAP=${keymap}\" > /mnt/etc/vconsole.conf"
		echo "KEYMAP=${keymap}" > /mnt/etc/vconsole.conf
    print_warning " CONCLUÍDO!"
		pressanykey
	fi
}

generatemkinitcpio() {
  print_title "GERANDO MKINITCPIO..."
  arch-chroot /mnt mkinitcpio -p ${KERNEL_VER}
  print_warning " CONCLUÍDO!"
  pressanykey  
}

installgrub() {
  print_title "INSTALANDO E CONFIGURANDO O GRUB..."
  pacstrap /mnt grub-efi-x86_64 efibootmgr os-prober
  arch-chroot /mnt grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=ArchLinux --recheck
  arch-chroot /mnt grub-mkconfig -o /boot/grub/grub.cfg
  print_warning " CONCLUÍDO!"
  pressanykey  
}

setrootpasswd() {
  print_title "CONFIGURANDO SENHA DE ROOT..."
  arch-chroot /mnt passwd
  print_warning " CONCLUÍDO!"
  pressanykey
}

unmountdevices() {
  print_warning "DESMONTANDO AS PARTIÇÕES..."
	clear
	echo "umount -R /mnt"
	umount -R /mnt
	if [ ! "${swapdev}" = "" ]; then
		echo "swapoff ${swapdev}"
		swapoff ${swapdev}
	fi
  print_warning " CONCLÚIDO!"
	pressanykey
}


# --------------------------------------------------------



# --------------------------------------------------------
archmenu(){
	if [ "${1}" = "" ]; then
		nextitem="."
	else
		nextitem=${1}
	fi
	options=()
	options+=("${txtsethostname}" "/etc/hostname")
	options+=("${txtsetkeymap}" "/etc/vconsole.conf")
	options+=("${txtsetfont}" "/etc/vconsole.conf (${txtoptional})")
	options+=("${txtsetlocale}" "/etc/locale.conf, /etc/locale.gen")
	options+=("${txtsettime}" "/etc/localtime")
	options+=("${txtsetrootpassword}" "")
	options+=("${txtgenerate//%1/fstab}" "")
	if [ "${luksdrive}" = "1" ]; then
		options+=("${txtgenerate//%1/crypttab}" "")
	fi
	if [ "${luksroot}" = "1" ]; then
		options+=("${txtgenerate//%1/mkinitcpio.conf-luks}" "(encrypt hooks)")
	fi
	if [ "${isnvme}" = "1" ]; then
		options+=("${txtgenerate//%1/mkinitcpio.conf-nvme}" "(nvme module)")
	fi
	options+=("${txtedit//%1/fstab}" "(${txtoptional})")
	options+=("${txtedit//%1/crypttab}" "(${txtoptional})")
	options+=("${txtedit//%1/mkinitcpio.conf}" "(${txtoptional})")
	options+=("${txtedit//%1/mirrorlist}" "(${txtoptional})")
	options+=("${txtbootloader}" "")
	options+=("${txtextrasmenu}" "")
	options+=("archdi" "${txtarchdidesc}")
	sel=$(whiptail --backtitle "${apptitle}" --title "${txtarchinstallmenu}" --menu "" --cancel-button "${txtback}" --default-item "${nextitem}" 0 0 0 \
		"${options[@]}" \
		3>&1 1>&2 2>&3)
	if [ "$?" = "0" ]; then
		case ${sel} in
			"${txtsethostname}")
				archsethostname
				nextitem="${txtsetkeymap}"
			;;
			"${txtsetkeymap}")
				archsetkeymap
				nextitem="${txtsetlocale}"
			;;
			"${txtsetfont}")
				archsetfont
				nextitem="${txtsetlocale}"
			;;
			"${txtsetlocale}")
				archsetlocale
				nextitem="${txtsettime}"
			;;
			"${txtsettime}")
				archsettime
				nextitem="${txtsetrootpassword}"
			;;
			"${txtsetrootpassword}")
				archsetrootpassword
				nextitem="${txtgenerate//%1/fstab}"
			;;
			"${txtgenerate//%1/fstab}")
				archgenfstabmenu
				if [ "${luksdrive}" = "1" ]; then
					nextitem="${txtgenerate//%1/crypttab}"
				else
					if [ "${luksroot}" = "1" ]; then
						nextitem="${txtgenerate//%1/mkinitcpio.conf-luks}"
					else
						if [ "${isnvme}" = "1" ]; then
							nextitem="${txtgenerate//%1/mkinitcpio.conf-nvme}"
						else
							nextitem="${txtbootloader}"
						fi
					fi
				fi
			;;
			"${txtgenerate//%1/crypttab}")
				archgencrypttab
				if [ "${luksroot}" = "1" ]; then
					nextitem="${txtgenerate//%1/mkinitcpio.conf-luks}"
				else
					if [ "${isnvme}" = "1" ]; then
						nextitem="${txtgenerate//%1/mkinitcpio.conf-nvme}"
					else
						nextitem="${txtbootloader}"
					fi
				fi
			;;
			"${txtgenerate//%1/mkinitcpio.conf-luks}")
				archgenmkinitcpioluks
				if [ "${isnvme}" = "1" ]; then
					nextitem="${txtgenerate//%1/mkinitcpio.conf-nvme}"
				else
					nextitem="${txtbootloader}"
				fi
			;;
			"${txtgenerate//%1/mkinitcpio.conf-nvme}")
				archgenmkinitcpionvme
				nextitem="${txtbootloader}"
			;;
			"${txtedit//%1/fstab}")
				${EDITOR} /mnt/etc/fstab
				nextitem="${txtedit//%1/fstab}"
			;;
			"${txtedit//%1/crypttab}")
				${EDITOR} /mnt/etc/crypttab
				nextitem="${txtedit//%1/crypttab}"
			;;
			"${txtedit//%1/mkinitcpio.conf}")
				archeditmkinitcpio
				nextitem="${txtedit//%1/mkinitcpio.conf}"
			;;
			"${txtedit//%1/mirrorlist}")
				${EDITOR} /mnt/etc/pacman.d/mirrorlist
				nextitem="${txtedit//%1/mirrorlist}"
			;;
			"${txtbootloader}")
				archbootloadermenu
				nextitem="${txtextrasmenu}"
			;;
			"${txtextrasmenu}")
				archextrasmenu
				nextitem="archdi"
			;;
			"archdi")
				installarchdi
				nextitem="archdi"
			;;
		esac
		archmenu "${nextitem}"
	fi
}

archchroot(){
	echo "arch-chroot /mnt /root"
	cp ${0} /mnt/root
	chmod 755 /mnt/root/$(basename "${0}")
	arch-chroot /mnt /root/$(basename "${0}") --chroot ${1} ${2}
	rm /mnt/root/$(basename "${0}")
	echo "exit"
}

archsetfont(){
	items=$(find /usr/share/kbd/consolefonts/*.psfu.gz -printf "%f\n")

	options=()
	for item in ${items}; do
		options+=("${item%%.*}" "")
	done
	vcfont=$(whiptail --backtitle "${apptitle}" --title "${txtsetfont} (${txtoptional})" --menu "" 0 0 0 \
		"${options[@]}" \
		3>&1 1>&2 2>&3)
	if [ "$?" = "0" ]; then
		clear
		echo "echo \"FONT=${vcfont}\" >> /mnt/etc/vconsole.conf"
		echo "FONT=${vcfont}" >> /mnt/etc/vconsole.conf
		pressanykey
	fi
}
archsetlocalechroot(){
	echo "locale-gen"
	locale-gen
	exit
}
archsettimeutcchroot(){
	echo "hwclock --systohc --utc"
	hwclock --systohc --utc
	exit
}
archsettimelocalchroot(){
	echo "hwclock --systohc --localtime"
	hwclock --systohc --localtime
	exit
}

archsetrootpassword(){
	clear
	archchroot setrootpassword
	pressanykey
}
archsetrootpasswordchroot(){
	echo "passwd root"
	passed=1
	while [[ ${passed} != 0 ]]; do
		passwd root
		passed=$?
	done
	exit
}

archgencrypttab(){
	clear
	echo "echo -e \"${crypttab}\" >> /mnt/etc/crypttab"
	echo -e "${crypttab}" >> /mnt/etc/crypttab
	pressanykey
}

archgenmkinitcpioluks(){
	clear
	echo "sed -i \"s/block filesystems/block encrypt filesystems/g\" /mnt/etc/mkinitcpio.conf"
	sed -i "s/block filesystems/block encrypt filesystems/g" /mnt/etc/mkinitcpio.conf
	archchroot genmkinitcpio
	pressanykey
}
archgenmkinitcpionvme(){
	clear
	echo "sed -i \"s/MODULES=()/MODULES=(nvme)/g\" /mnt/etc/mkinitcpio.conf"
	sed -i "s/MODULES=()/MODULES=(nvme)/g" /mnt/etc/mkinitcpio.conf
	archchroot genmkinitcpio
	pressanykey
}

archeditmkinitcpio(){
	${EDITOR} /mnt/etc/mkinitcpio.conf
	if (whiptail --backtitle "${apptitle}" --title "${txtedit//%1/mkinitcpio.conf}" --yesno "${txtgenerate//%1/mkinitcpio} ?" 0 0) then
		clear
		archchroot genmkinitcpio
		pressanykey
	fi
}
archgenmkinitcpiochroot(){
	echo "mkinitcpio -p linux"
	mkinitcpio -p linux
	exit
}


archbootloadermenu(){
	options=()
	options+=("grub" "")
	if [ "${efimode}" == "1" ]; then
		options+=("systemd-boot" "")
		options+=("refind" "")
	fi
	if [ "${efimode}" != "2" ]; then
		options+=("syslinux" "")
	fi
	sel=$(whiptail --backtitle "${apptitle}" --title "${txtbootloadermenu}" --menu "" --cancel-button "${txtback}" 0 0 0 \
		"${options[@]}" \
		3>&1 1>&2 2>&3)
	if [ "$?" = "0" ]; then
		case ${sel} in
			"grub") archbootloadergrubmenu;;
			"systemd-boot")archbootloadersystemdbmenu;;
			"refind") archbootloaderrefindmenu;;
			"syslinux")archbootloadersyslinuxbmenu;;
		esac
	fi
}


archbootloadergrubmenu(){
	if [ "${1}" = "" ]; then
		nextblitem="."
	else
		nextblitem=${1}
	fi
	options=()
	options+=("${txtinstall//%1/grub}" "pacstrap grub (efibootmgr), grub-mkconfig")
	options+=("${txtedit//%1/grub}" "(${txtoptional})")
	options+=("${txtinstall//%1/bootloader}" "grub-install")
	sel=$(whiptail --backtitle "${apptitle}" --title "${txtbootloadergrubmenu}" --menu "" --cancel-button "${txtback}" --default-item "${nextblitem}" 0 0 0 \
		"${options[@]}" \
		3>&1 1>&2 2>&3)
	if [ "$?" = "0" ]; then
		case ${sel} in
			"${txtinstall//%1/grub}")
				archgrubinstall
				nextblitem="${txtinstall//%1/bootloader}"
			;;
			"${txtedit//%1/grub}")
				${EDITOR} /mnt/etc/default/grub
				if (whiptail --backtitle "${apptitle}" --title "${txtedit//%1/grub}" --yesno "${txtrungrubmakeconfig}" 0 0) then
					clear
					archchroot grubinstall
					pressanykey
				fi
				nextblitem="${txtinstall//%1/bootloader}"
			;;
			"${txtinstall//%1/bootloader}")
				archgrubinstallbootloader
				nextblitem="${txtinstall//%1/bootloader}"
			;;
		esac
		archbootloadergrubmenu "${nextblitem}"
	fi
}

archgrubinstall(){
	clear
	echo "pacstrap /mnt grub"
	pacstrap /mnt grub
	pressanykey

	if [ "${eficomputer}" == "1" ]; then
		if [ "${efimode}" == "1" ]||[ "${efimode}" == "2" ]; then
			if (whiptail --backtitle "${apptitle}" --title "${txtinstall//%1/efibootmgr}" --yesno "${txtefibootmgr}" 0 0) then
				clear
				echo "pacstrap /mnt efibootmgr"
				pacstrap /mnt efibootmgr
				pressanykey
			fi
		else
			if (whiptail --backtitle "${apptitle}" --title "${txtinstall//%1/efibootmgr}" --yesno "${txtefibootmgr}" --defaultno 0 0) then
				clear
				echo "pacstrap /mnt efibootmgr"
				pacstrap /mnt efibootmgr
				pressanykey
			fi
		fi
	fi

	if [ "${luksroot}" = "1" ]; then
		if (whiptail --backtitle "${apptitle}" --title "${txtinstall//%1/grub}" --yesno "${txtgrubluksdetected}" 0 0) then
			clear
			echo "sed -i /GRUB_CMDLINE_LINUX=/c\GRUB_CMDLINE_LINUX=\\\"cryptdevice=/dev/disk/by-uuid/${luksrootuuid}:root\\\" /mnt/etc/default/grub"
			sed -i /GRUB_CMDLINE_LINUX=/c\GRUB_CMDLINE_LINUX=\"cryptdevice=/dev/disk/by-uuid/${luksrootuuid}:root\" /mnt/etc/default/grub
			pressanykey
		fi
	fi

	clear
	archchroot grubinstall
	pressanykey
}
archgrubinstallchroot(){
	echo "mkdir /boot/grub"
	echo "grub-mkconfig -o /boot/grub/grub.cfg"
	mkdir /boot/grub
	grub-mkconfig -o /boot/grub/grub.cfg
	exit
}

archgrubinstallbootloader(){
		device=$( selectdisk "${txtinstall//%1/bootloader}" )  
	if [ "$?" = "0" ]; then
		if [ "${eficomputer}" == "1" ]; then
			options=()
			if [ "${efimode}" = "1" ]; then
				options+=("EFI" "")
				options+=("BIOS" "")
				options+=("BIOS+EFI" "")
			elif [ "${efimode}" = "2" ]; then
				options+=("BIOS+EFI" "")
				options+=("BIOS" "")
				options+=("EFI" "")
			else
				options+=("BIOS" "")
				options+=("EFI" "")
				options+=("BIOS+EFI" "")
			fi
			sel=$(whiptail --backtitle "${apptitle}" --title "${txtinstall//%1/bootloader}" --menu "" --cancel-button "${txtback}" 0 0 0 \
				"${options[@]}" \
				3>&1 1>&2 2>&3)
			if [ "$?" = "0" ]; then
				clear
				case ${sel} in
					"BIOS") archchroot grubbootloaderinstall ${device};;
					"EFI") archchroot grubbootloaderefiinstall ${device};;
					"BIOS+EFI") archchroot grubbootloaderefiusbinstall ${device};;
				esac
				pressanykey
			fi
		else
			clear
			archchroot grubbootloaderinstall ${device}
			pressanykey
		fi
	fi
}
archgrubinstallbootloaderchroot(){
	if [ ! "${1}" = "none" ]; then
		echo "grub-install --target=i386-pc --recheck ${1}"
		grub-install --target=i386-pc --recheck ${1}
	fi
	exit
}
archgrubinstallbootloaderefichroot(){
	if [ ! "${1}" = "none" ]; then
		echo "grub-install --target=x86_64-efi --efi-directory=/boot --recheck ${1}"
		grub-install --target=x86_64-efi --efi-directory=/boot --recheck ${1}
		isvbox=$(lspci | grep "VirtualBox G")
		if [ "${isvbox}" ]; then
			echo "VirtualBox detected, creating startup.nsh..."
			echo "\EFI\arch\grubx64.efi" > /boot/startup.nsh
		fi
	fi
	exit
}
archgrubinstallbootloaderefiusbchroot(){
	if [ ! "${1}" = "none" ]; then
		echo "grub-install --target=i386-pc --recheck ${1}"
		grub-install --target=i386-pc --recheck ${1}
		echo "grub-install --target=x86_64-efi --efi-directory=/boot --removable --recheck ${1}"
		grub-install --target=x86_64-efi --efi-directory=/boot --removable --recheck ${1}
		isvbox=$(lspci | grep "VirtualBox G")
		if [ "${isvbox}" ]; then
			echo "VirtualBox detected, creating startup.nsh..."
			echo "\EFI\arch\grubx64.efi" > /boot/startup.nsh
		fi
	fi
	exit
}


archbootloadersyslinuxbmenu(){
	if [ "${1}" = "" ]; then
		nextblitem="."
	else
		nextblitem=${1}
	fi
	options=()
	options+=("${txtinstall//%1/syslinux}" "pacstrap syslinux (gptfdisk,mtools)")
	options+=("${txtedit//%1/syslinux}" "(${txtoptional})")
	options+=("${txtinstall//%1/bootloader}" "syslinux-install_update")
	sel=$(whiptail --backtitle "${apptitle}" --title "${txtbootloadersyslinuxmenu}" --menu "" --cancel-button "${txtback}" --default-item "${nextblitem}" 0 0 0 \
		"${options[@]}" \
		3>&1 1>&2 2>&3)
	if [ "$?" = "0" ]; then
		case ${sel} in
			"${txtinstall//%1/syslinux}")
				archsyslinuxinstall
				nextblitem="${txtinstall//%1/bootloader}"
			;;
			"${txtedit//%1/syslinux}")
				${EDITOR} /mnt/boot/syslinux/syslinux.cfg
				nextblitem="${txtinstall//%1/bootloader}"
			;;
			"${txtinstall//%1/bootloader}")
				archsyslinuxinstallbootloader
				nextblitem="${txtinstall//%1/bootloader}"
			;;
		esac
		archbootloadersyslinuxbmenu "${nextblitem}"
	fi
}
archsyslinuxinstall(){
	clear

	if [ "${efimode}" == "1" ]||[ "${efimode}" == "2" ]; then
		echo "${txtsyslinuxaddefibootmgr}"
		additionalpkg=${additionalpkg}"efibootmgr "
	fi

	if [ "${isnvme}" = "1" ]; then
		if [ "$(parted ${realrootdev::(-2)} print|grep gpt)" != "" ]; then
			echo "${txtsyslinuxaddgptfdisk}"
			additionalpkg=${additionalpkg}"gptfdisk "
		fi
	else
		if [ "$(parted ${realrootdev::8} print|grep gpt)" != "" ]; then
			echo "${txtsyslinuxaddgptfdisk}"
			additionalpkg=${additionalpkg}"gptfdisk "
		fi
	fi

	if [ "${bootdev}" != "" ]; then
		if [ "$(parted ${bootdev} print|grep fat)" != "" ]; then
			echo "${txtsyslinuxaddmtools}"
			additionalpkg=${additionalpkg}"mtools "
		fi
	fi

	echo "pacstrap /mnt syslinux ${additionalpkg}"
	pacstrap /mnt syslinux ${additionalpkg}
	pressanykey

	clear
	echo "Updating /boot/syslinux/syslinux.cfg"
	if [ "${luksroot}" = "1" ]; then
		echo "sed -i \"/APPEND\ root=/c\    APPEND root=/dev/mapper/root cryptdevice=${realrootdev}:root rw\" /mnt/boot/syslinux/syslinux.cfg"
		sed -i "/APPEND\ root=/c\    APPEND root=/dev/mapper/root cryptdevice=${realrootdev}:root\ rw" /mnt/boot/syslinux/syslinux.cfg
	else
		echo "sed -i \"/APPEND\ root=/c\    APPEND root=${rootdev} rw\" /mnt/boot/syslinux/syslinux.cfg"
		sed -i "/APPEND\ root=/c\    APPEND root=${rootdev}\ rw" /mnt/boot/syslinux/syslinux.cfg
	fi

	pressanykey
}
archsyslinuxinstallbootloader(){
	clear
	if [ "${efimode}" == "1" ]||[ "${efimode}" == "2" ]; then
		archchroot syslinuxbootloaderefiinstall ${bootdev}
	else
		archchroot syslinuxbootloaderinstall ${bootdev}
	fi
	pressanykey
}
archsyslinuxinstallbootloaderchroot(){
	if [ ! "${1}" = "none" ]; then
		echo "syslinux-install_update -i -a -m"
		syslinux-install_update -i -a -m
	fi
	exit
}
archsyslinuxinstallbootloaderefichroot(){
	if [ ! "${1}" = "none" ]; then
		echo "cp -r /usr/lib/syslinux/efi64/* /boot/syslinux"
		cp -r /usr/lib/syslinux/efi64/* /boot/syslinux
		if [ "${1::8}" == "/dev/nvm" ]; then
			echo "efibootmgr --create --disk ${1::(-2)} --part ${1:(-1)} --loader /syslinux/syslinux.efi --label "Syslinux" --verbose"
			efibootmgr --create --disk ${1::(-2)} --part ${1:(-1)} --loader /syslinux/syslinux.efi --label "Syslinux" --verbose
		else
			echo "efibootmgr --create --disk ${1::8} --part ${1:(-1)} --loader /syslinux/syslinux.efi --label "Syslinux" --verbose"
			efibootmgr --create --disk ${1::8} --part ${1:(-1)} --loader /syslinux/syslinux.efi --label "Syslinux" --verbose
		fi
		isvbox=$(lspci | grep "VirtualBox G")
		if [ "${isvbox}" ]; then
			echo "VirtualBox detected, creating startup.nsh..."
			echo "\syslinux\syslinux.efi" > /boot/startup.nsh
		fi
	fi
	exit
}


archbootloadersystemdbmenu(){
	if [ "${1}" = "" ]; then
		nextblitem="."
	else
		nextblitem=${1}
	fi
	options=()
	options+=("${txtinstall//%1/systemd-boot}" "bootctl install")
	options+=("${txtedit//%1/loader.conf}" "(${txtoptional})")
	options+=("${txtedit//%1/entries}" "(${txtoptional})")
	sel=$(whiptail --backtitle "${apptitle}" --title "${txtbootloadersystemdmenu}" --menu "" --cancel-button "${txtback}" --default-item "${nextblitem}" 0 0 0 \
		"${options[@]}" \
		3>&1 1>&2 2>&3)
	if [ "$?" = "0" ]; then
		case ${sel} in
			"${txtinstall//%1/systemd-boot}")
				archsystemdinstall
				nextblitem="${txtinstall//%1/loader.conf}"
			;;
			"${txtedit//%1/loader.conf}")
				${EDITOR} /mnt/boot/loader/loader.conf
				nextblitem="${txtedit//%1/entries}"
			;;
			"${txtedit//%1/entries}")
				${EDITOR} /mnt/boot/loader/entries/*
				nextblitem="${txtedit//%1/entries}"
			;;
		esac
		archbootloadersystemdbmenu "${nextblitem}"
	fi
}
archsystemdinstall(){
	clear
	archchroot systemdbootloaderinstall ${realrootdev}

	partuuid=$(blkid -s PARTUUID -o value ${realrootdev})
	parttype=$(blkid -s TYPE -o value ${rootdev})

	echo "cp /mnt/usr/share/systemd/bootctl/arch.conf /mnt/boot/loader/entries"
	echo "echo \"timeout 2\" >> /mnt/boot/loader/loader.conf"
	echo "cp /mnt/usr/share/systemd/bootctl/loader.conf /mnt/boot/loader"
	if [ "${luksroot}" = "1" ]; then
		cryptuuid=$(blkid -s UUID -o value ${realrootdev})
		echo "sed -i \"s/PARTUUID=XXXX/\\/dev\\/mapper\\/root/\" /mnt/boot/loader/entries/arch.conf"
		echo "sed -i \"s/XXXX/${parttype}/\" /mnt/boot/loader/entries/arch.conf"
		echo "sed -i \"s/root=/cryptdevice=UUID=${cryptuuid}:root root=/\" /mnt/boot/loader/entries/arch.conf"
	else
		echo "sed -i \"s/PARTUUID=XXXX/PARTUUID=${partuuid}/\" /mnt/boot/loader/entries/arch.conf"
		echo "sed -i \"s/XXXX/${parttype}/\" /mnt/boot/loader/entries/arch.conf"
	fi
	echo "cp /mnt/boot/loader/entries/arch.conf /mnt/boot/loader/entries/arch-fallback.conf"
	echo "sed -i \"s/Arch Linux/Arch Linux Fallback/\" /mnt/boot/loader/entries/arch-fallback.conf"
	echo "sed -i \"s/initramfs-linux/initramfs-linux-fallback/\" /mnt/boot/loader/entries/arch-fallback.conf"

	cp /mnt/usr/share/systemd/bootctl/loader.conf /mnt/boot/loader
	echo "timeout 2" >> /mnt/boot/loader/loader.conf
	cp /mnt/usr/share/systemd/bootctl/arch.conf /mnt/boot/loader/entries


	if [ "${luksroot}" = "1" ]; then
		sed -i "s/PARTUUID=XXXX/\/dev\/mapper\/root/" /mnt/boot/loader/entries/arch.conf
		sed -i "s/XXXX/${parttype}/" /mnt/boot/loader/entries/arch.conf
		sed -i "s/root=/cryptdevice=UUID=${cryptuuid}:root root=/" /mnt/boot/loader/entries/arch.conf
	else
		sed -i "s/PARTUUID=XXXX/PARTUUID=${partuuid}/" /mnt/boot/loader/entries/arch.conf
		sed -i "s/XXXX/${parttype}/" /mnt/boot/loader/entries/arch.conf
	fi

	cp /mnt/boot/loader/entries/arch.conf /mnt/boot/loader/entries/arch-fallback.conf
	sed -i "s/Arch Linux/Arch Linux Fallback/" /mnt/boot/loader/entries/arch-fallback.conf
	sed -i "s/initramfs-linux/initramfs-linux-fallback/" /mnt/boot/loader/entries/arch-fallback.conf

	pressanykey
}
archsystemdinstallchroot(){
	echo "bootctl --path=/boot install"
	bootctl --path=/boot install
	isvbox=$(lspci | grep "VirtualBox G")
	if [ "${isvbox}" ]; then
		echo "VirtualBox detected, creating startup.nsh..."
		echo "\EFI\systemd\systemd-bootx64.efi" > /boot/startup.nsh
	fi
}


archbootloaderrefindmenu(){
	if [ "${1}" = "" ]; then
		nextblitem="."
	else
		nextblitem=${1}
	fi
	options=()
	options+=("${txtinstall//%1/refind}" "pacstrap refind-efi")
	options+=("${txtedit//%1/refind_linux.conf}" "(${txtoptional})")
	sel=$(whiptail --backtitle "${apptitle}" --title "${txtbootloaderrefindmenu}" --menu "" --cancel-button "${txtback}" --default-item "${nextblitem}" 0 0 0 \
		"${options[@]}" \
		3>&1 1>&2 2>&3)
	if [ "$?" = "0" ]; then
		case ${sel} in
			"${txtinstall//%1/refind}")
				archrefindinstall
				nextblitem="${txtedit//%1/refind_linux.conf}"
			;;
			"${txtedit//%1/refind_linux.conf}")
				${EDITOR} /mnt/boot/refind_linux.conf
				nextblitem="${txtedit//%1/refind_linux.conf}"
			;;
		esac
		archbootloaderrefindmenu "${nextblitem}"
	fi

}
archrefindinstall(){
	clear

	echo "pacstrap /mnt refind-efi"
	echo "archchroot refindbootloaderinstall ${realrootdev}"
	echo "echo \"\\\"Arch Linux         \\\" \\\"root=UUID=${rootuuid} rw add_efi_memmap\\\"\" > /mnt/boot/refind_linux.conf"
	echo "echo \"\\\"Arch Linux Fallback\\\" \\\"root=UUID=${rootuuid} rw add_efi_memmap initrd=/initramfs-linux-fallback.img\\\"\" >> /mnt/boot/refind_linux.conf"
	echo "echo \"\\\"Arch Linux Terminal\\\" \\\"root=UUID=${rootuuid} rw add_efi_memmap systemd.unit=multi-user.target\\\"\" >> /mnt/boot/refind_linux.conf"

	pacstrap /mnt refind-efi
	archchroot refindbootloaderinstall ${realrootdev}
	rootuuid=$(blkid -s UUID -o value ${realrootdev})
	echo "\"Arch Linux         \" \"root=UUID=${rootuuid} rw add_efi_memmap\"" > /mnt/boot/refind_linux.conf
	echo "\"Arch Linux Fallback\" \"root=UUID=${rootuuid} rw add_efi_memmap initrd=/initramfs-linux-fallback.img\"" >> /mnt/boot/refind_linux.conf
	echo "\"Arch Linux Terminal\" \"root=UUID=${rootuuid} rw add_efi_memmap systemd.unit=multi-user.target\"" >> /mnt/boot/refind_linux.conf
	pressanykey
}
archrefindinstallchroot(){
	#--usedefault /dev/sdXY --alldrivers
	echo "refind-install"
	refind-install
	isvbox=$(lspci | grep "VirtualBox G")
	if [ "${isvbox}" ]; then
		echo "VirtualBox detected, creating startup.nsh..."
		echo "\EFI\refind\refind_x64.efi" > /boot/startup.nsh
	fi
}


archextrasmenu(){
	pkgs=""
	options=()
	options+=("nano" "" on)
	options+=("vim" "" on)
	options+=("dhcpcd" "" on)
	sel=$(whiptail --backtitle "${apptitle}" --title "${txtextrasmenu}" --checklist "" 0 0 0 \
		"${options[@]}" \
		3>&1 1>&2 2>&3)
	if [ ! "$?" = "0" ]; then
		return 1
	fi
	for itm in $sel; do
		pkgs="$pkgs $(echo $itm | sed 's/"//g')"
	done
	clear
	echo "pacstrap /mnt ${pkgs}"
	pacstrap /mnt ${pkgs}
	if [[ "${pkgs}" == *"dhcpcd"* ]]; then
		archchroot enabledhcpcd
	fi
	pressanykey
}
archenabledhcpcdchroot(){
	echo "systemctl enable dhcpcd"
	systemctl enable dhcpcd
	exit
}

installarchdi(){
	txtinstallarchdi="Arch Linux Desktop Install (archdi) is a second script who can help you to install a full workstation.\n\nYou can just launch the script or install it. Choose in the next menu.\n\nArch Linux Desktop Install as two dependencies : wget and libnewt.\n\npacstrap wget libnewt ?"
	if(whiptail --backtitle "${apptitle}" --title "archdi" --yesno "${txtinstallarchdi}" 0 0) then
		clear
		echo "pacstrap /mnt wget libnewt"
		pacstrap /mnt wget libnewt
	fi
	if [ "$?" = "0" ]; then
		options=()
		options+=("${txtarchdiinstallandlaunch}" "")
		options+=("${txtarchdilaunch}" "")
		options+=("${txtarchdiinstall}" "")
		sel=$(whiptail --backtitle "${apptitle}" --title "${txtarchdimenu}" --menu "" --cancel-button "${txtback}" 0 0 0 \
			"${options[@]}" \
			3>&1 1>&2 2>&3)
		if [ "$?" = "0" ]; then
			case ${sel} in
				"${txtarchdiinstallandlaunch}") archchroot archdiinstallandlaunch;;
				"${txtarchdilaunch}") archchroot archdilaunch;;
				"${txtarchdiinstall}")
					clear
					archchroot archdiinstall
					pressanykey
				;;
			esac
		fi
	fi
}
archdidownload(){
	txtselectserver="Select source server :"
	txtback="Back"
	options=()
	options+=("sourceforge.net" "recommended")
	options+=("github.com" "")
	sel=$(whiptail --backtitle "${apptitle}" --title "${txtselectserver}" --menu "" --cancel-button "${txtback}" 0 0 0 \
		"${options[@]}" \
		3>&1 1>&2 2>&3)
	if [ "$?" = "0" ]; then
		case ${sel} in
			"sourceforge.net")
				archdiurl=archdi.sourceforge.net/archdi
			;;
			"github.com")
				archdiurl=matmoul.github.io/archdi >archdi
			;;
		esac
	fi
	echo "curl -L ${archdiurl} >archdi"
	curl -L ${archdiurl} >archdi
}
archdiinstallandlaunchchroot(){
	cd
	archdidownload
	sh archdi -i
	archdi --chroot
	exit
}
archdilaunchchroot(){
	cd
	archdidownload
	sh archdi --chroot
	rm archdi
	exit
}
archdiinstallchroot(){
	cd
	archdidownload
	sh archdi -i
	exit
}

rebootpc() {
	if (whiptail --backtitle "${apptitle}" --title "${txtreboot}" --yesno "${txtreboot} ?" --defaultno 0 0) then
		clear
		reboot
	fi
}

# --------------------------------------------------------



# --------------------------------------------------------

pressanykey() {
	print_line
  read -e -sn 1 -p "${txtpressanykey}"
}

loadstrings(){

	locale=pt_BR.UTF-8

	txtexit="Sair"
	txtback="Voltar"
	txtignore="Ignorar"

	txtselectserver="Selecione o servidor fonte :"

	txtmainmenu="Menu Principal"
	txtinitial="Preparar instalação"
  txttimesync="Sincronizar a hora"
	txtdiskpartmenu="Partições de disco"
	txtselectpartsmenu="Selecionar partições"
  txtrankmirrors="Rankear espelhos de rede"
  txtinstallbase="Instalar a base"
  txtinstallessentialpkgs="Instalar pacotes essenciais"
  txtinstallnetwork="Instalar rede"
	txtgeneratefstab="Gerar fstab"
	txtsethostname="Definir noma da maquina"
	txtsetlocale="Definir locale"
  txtsettimezone="Definir fuso horário"
	txtsetkeymap="Definir layout do teclado"
	txtgeneratemkinitc="Gerar mkinitcpio"
	txtinstallgrub="Instalar o grub"
	txtsetrootpasswd="Definir senha de root"
	txthelp="Ajuda"
	txtchangelog="Changelog"
	txtreboot="Reiniciar"

	txtautoparts="Auto Partitions"
	txteditparts="Edit Partitions"

	txtautopartsconfirm="Dispositivo selecionado : %1\n\nTodos os dados serão apagados ! \n\nContinuar ?"

	txtautopartclear="Limpar todos os dados da partição"
	txtautopartcreate="Criar partição %1"
	txthybridpartcreate="Configurar MBR Híbrido"
	txtautopartsettype="Configurar tipo da partição %1"

	txtselectdevice="Selecione dispositivo %1 :"
	txtselecteddevices="Dispositivos selecionados :"

	txtformatmountmenu="Formatar e Montar"
	txtformatdevices="Formatar dispositivos"
	txtformatdevice="Formatar dispositivo"
	txtmount="Montar"
	txtunmount="Desmontar"
	txtmountdesc="Instalar e configurar"

	txtformatdeviceconfirm="Warning, all data on selected devices will be erased ! \nFormat devices ?"

	txtselectpartformat="Select partition format for %1 :"
	txtformatingpart="Formatting partition %1 as"
	txtcreateluksdevice="Create luks device :"
	txtopenluksdevice="Open luks device :"
	txtluksdevicecreated="luks device created !"

	txtinstallmenu="Install Menu"

	txtarchinstallmenu="Arch Install Menu"

	txtselectmirrorsbycountry="Select mirrors by country"
	txtselectcountry="Select country"
	txteditmirrorlist="Edit mirrorlist"
	txtinstallarchlinux="Install Arch Linux"
	txtinstallarchlinuxkernel="Kernel"
	txtinstallarchlinuxfirmwares="Firmwares"
	txtinstallarchlinuxfilesystems="File Systems"
	txtinstallarchlinuxcustompackagelist="Custom Package List"
	txtconfigarchlinux="Config Arch Linux"

	txtsethostname="Set Computer Name"
	txtsetfont="Set Font"
	txtsetlocale="Set Locale"
	txtsettime="Set Time"
	txtsetrootpassword="Set root password"

	txthwclock="Hardware clock :"
	txthwclockutc="UTC"
	txthwclocklocal="Local"

	txtbootloader="Bootloader"
	txtbootloadermenu="Choose your bootloader"

	txtefibootmgr="efibootmgr is required for EFI computers."

	txtbootloadergrubmenu="Grub Install Menu"
	txtrungrubmakeconfig="Run grub-mkconfig ?"
	txtgrubluksdetected="Encrypted root partion !\n\nAdd cryptdevice= to GRUB_CMDLINE_LINUX in /etc/default/grub ?"

	txtbootloadersyslinuxmenu="Syslinux Install Menu"
	txtsyslinuxaddefibootmgr="EFI install require efibootmgr"
	txtsyslinuxaddgptfdisk="GPT disk require gptfdisk"
	txtsyslinuxaddmtools="FAT boot part require mtools"

	txtbootloadersystemdmenu="Systemd-boot Install Menu"

	txtbootloaderrefindmenu="rEFInd Install Menu"
	
	txtextrasmenu="Extras"

	txtoptional="Optional"
	txtrecommandeasyinst="Recommanded for easy install"
	txtset="Set %1"
	txtgenerate="Generate %1"
	txtedit="Edit %1"
	txtinstall="Install %1"
	txtenable="Enable %1"

	txtpressanykey="Press any key to continue."

	txtarchdidesc="Full desktop install script"
	txtinstallarchdi="Arch Linux Desktop Install (archdi) is a second script who can help you to install a full workstation.\n\nYou can just launch the script or install it. Choose in the next menu.\n\nArch Linux Desktop Install as two dependencies : wget and libnewt.\n\npacstrap wget libnewt ?"
	txtarchdiinstallandlaunch="Install and run archdi"
	txtarchdiinstall="Install archdi"
	txtarchdilaunch="Launch archdi"
}

# --------------------------------------------------------



# --------------------------------------------------------
while (( "$#" )); do
	case ${1} in
		--help)
			echo "archfi"
			echo "------"
			echo "-cpl | --custom-package-list url  Set custom package list url"     
			echo "-sf | --skip-font                 Skip setfont from language files"
			echo "-efiX                             -efi0 : disable EFI, -efi1 efi inst, -efi2 efi hybrid inst"
			echo "-t | --test ghusername ghbranch   Test archfi script and language"
			exit 0
		;;
		-cpl | --custom-package-list)
			curl -L ${2} > /tmp/archfi-custom-package-list
			if [[ "$?" != "0" ]]; then
				echo "Error downloading custom package list"
				exit 0
			fi
			cpl=1
		;;
		-sf | --skip-font) skipfont=1;;
		-t | --test)
			wget -O archfi https://raw.githubusercontent.com/${2}/archfi/${3}/archfi
			sh archfi -tt ${2} ${3}
			exit 0
		;;
		-tt) baseurl="https://raw.githubusercontent.com/${2}/archfi/${3}";;
		-efi0) efimode=0;;
		-efi1)
			eficomputer=1
			efimode=1
		;;
		-efi2)
			eficomputer=1
			efimode=2
		;;
		--chroot) chroot=1
							command=${2}
							args=${3};;
	esac
	shift
done

if [ "${chroot}" = "1" ]; then
	case ${command} in
		'setrootpassword') archsetrootpasswordchroot;;
		'setlocale') archsetlocalechroot;;
		'settimeutc') archsettimeutcchroot;;
		'settimelocal') archsettimelocalchroot;;
		'genmkinitcpio') archgenmkinitcpiochroot;;
		'enabledhcpcd') archenabledhcpcdchroot;;
		'grubinstall') archgrubinstallchroot;;
		'grubbootloaderinstall') archgrubinstallbootloaderchroot ${args};;
		'grubbootloaderefiinstall') archgrubinstallbootloaderefichroot ${args};;
		'grubbootloaderefiusbinstall') archgrubinstallbootloaderefiusbchroot ${args};;
		'syslinuxbootloaderinstall') archsyslinuxinstallbootloaderchroot ${args};;
		'syslinuxbootloaderefiinstall') archsyslinuxinstallbootloaderefichroot ${args};;
		'systemdbootloaderinstall') archsystemdinstallchroot ${args};;
		'refindbootloaderinstall') archrefindinstallchroot ${args};;
		'archdiinstallandlaunch') archdiinstallandlaunchchroot;;
		'archdiinstall') archdiinstallchroot;;
		'archdilaunch') archdilaunchchroot;;
	esac
else
	pacman -S --needed arch-install-scripts wget libnewt
	dmesg |grep efi: > /dev/null
	if [ "$?" == "1" ]; then
		if [ "${eficomputer}" != "1" ]; then
			eficomputer=0
		fi
	else
		eficomputer=1
		if [ "${efimode}" == "" ]; then
			efimode=1
		fi
	fi
	loadstrings
	EDITOR=nano
	mainmenu
fi

exit 0
# --------------------------------------------------------
